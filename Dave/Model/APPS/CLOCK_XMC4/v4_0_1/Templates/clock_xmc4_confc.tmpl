package Model.APPS.CLOCK_XMC4.v4_0_1.Templates;

import Model.APPS.CLOCK_XMC4.v4_0_1.CLOCK_XMC4

out.print("""
/*******************************************************************************
 Copyright (c) 2015, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
																			  **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
																			  **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its              **
 contributors may be used to endorse or promote products derived from this    **
 software without specific prior written permission.                          **
																			  **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
																			  **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
																			  **
********************************************************************************
**                                                                            **
** PLATFORM : Infineon XMC4000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : APP Developer                                                   **
**                                                                            **
** NOTE     : Any Changes made to this file will be overwritten during Code   **
**            Generation                                                      **
**                                                                            **
*******************************************************************************/
/**
* @file clock_xmc4_conf.c
* @date 16 Feb, 2015
* @version 4.0.0
*
* @brief Provides generated code for configuration<br>
*
* <b>Detailed description of file</b> <br>
* This file contains the APP handles definition according to the 
* configuration parameters of APP GUI.
*
* History
*
* 4.0.0       16-Feb-2015   Initial version for DAVEv4
*
*/

/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/
#include "clock_xmc4.h"
""");

 // Variable declaration
 String appInst = null

//************************************************************************************
//**    Conversion of GUI values into corresponding LLD Enumeration values   ***
//************************************************************************************
 Map SysClkSrc            = ["Main PLL Clock":"XMC_SCU_CLOCK_SYSCLKSRC_PLL", "Internal Fast Oscillator":"XMC_SCU_CLOCK_SYSCLKSRC_OFI"] //gcombo_sysclksrc
 Map MainPllSet           = ["Normal Mode":"XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL","Prescaler Mode":"XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR"] //gcombo_mainpllset
 Map PllClkSrc            = ["External Crystal High Precision Oscillator":"XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP","Internal Fast Oscillator":"XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI"]//gcombo_pllclksrc
 Map WdtClkSrc            = ["Internal Fast Oscillator":"XMC_SCU_CLOCK_WDTCLKSRC_OFI","Standby Clock":"XMC_SCU_CLOCK_WDTCLKSRC_STDBY", "Main PLL Clock":"XMC_SCU_CLOCK_WDTCLKSRC_PLL"]//gcombo_pllclksrc
 Map RtcClkSrc            = ["External Crystal Ultra Low Power Oscillator":"XMC_SCU_HIB_RTCCLKSRC_ULP","Internal Slow Oscillator":"XMC_SCU_HIB_RTCCLKSRC_OSI"]//gcombo_pllclksrc
 Map StandbyClkSrc        = ["External Crystal Ultra Low Power Oscillator":"XMC_SCU_HIB_STDBYCLKSRC_OSCULP","Internal Slow Oscillator":"XMC_SCU_HIB_STDBYCLKSRC_OSI"]//gcombo_pllclksrc
 Map BackClkTrim          = ["Automatic Calibration Using Standby Clock":"XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC","Factory Calibration":"XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY"] //gcombo_backupclktrim
 Map UsbClkSrc            = ["USB PLL Clock":"XMC_SCU_CLOCK_USBCLKSRC_USBPLL","Main PLL Clock":"XMC_SCU_CLOCK_USBCLKSRC_SYSPLL"]//gcombo_usbclksrc
 Map ExtClkOutSrc         = ["System Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS","USB PLL Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_USB","Main PLL Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL", "Standby Clock":"XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY"] //gcombo_extclkoutsrc
 int ExtClkOutPinModeIndex
 List ExtClkOutPinAltFunc  = ["XMC_GPIO_MODE_OUTPUT_PUSH_PULL", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT5", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT6", "XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT7"]
 List ExtClkOutPinStrength = ["XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_STRONG_SOFT_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_STRONG_SLOW_EDGE", "XMC_GPIO_OUTPUT_STRENGTH_MEDIUM", "XMC_GPIO_OUTPUT_STRENGTH_WEAK"]
 int hwsel_hw

  // To identify the number of instances created in the project
 for (CLOCK_XMC4 Instance : appInstancesList) {
  appInst= Instance.getInstanceLabel()
  //******************************************************
  // Local variables which holds GUI check box actions
  //******************************************************
  // Calculation for OSCVAL derived from external oscillator frequency
  float OSCVAL = ((Instance.gfloat_extclkoscfreq.value * 1000000) / (2500000))-1
  int CPUDIV = (Instance.gint_cpuclkdiv.value)
  int CAPCOMDIV = (Instance.gint_ccufreqdiv.value)
  int EBUDIV = (Instance.gint_ebufreqdiv.value)
  int PERIDIV = (Instance.gint_peribusdiv.value)
  int EXTCLKOUTEN = ((Instance.gcheck_extclkout.value)?1:0)
  float OscFreq = ((Instance.gfloat_extclkoscfreq.value) * 1000000)
	
if(EXTCLKOUTEN == 1){
out.print("""
const XMC_GPIO_CONFIG_t ${appInst}_extclk_config = {
  .mode = ${ExtClkOutPinAltFunc.get((int)Instance.rg_extclkpin.getRegValue("", "iocr_pcr"))},
  .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE
};
""");

ExtClkOutPinModeIndex = (int) Instance.rg_extclkpin.getRegValue("", "iocr_oe")
if(ExtClkOutPinModeIndex == 1)
{
	hwsel_hw = (int) Instance.rg_extclkpin.getRegValue("", "hwsel_hw")
}
}

out.print("""
const XMC_SCU_CLOCK_CONFIG_t ${appInst}_ScuClk = {
  .syspll_config.n_div = ${Instance.gint_mainpllndiv.value}U,
  .syspll_config.p_div = ${Instance.gint_mainpllpdiv.value}U,
""");
if(Instance.gcombo_mainpllset.value == "Normal Mode")
{
out.print("""
  .syspll_config.k_div = ${Instance.gint_mainpllk2div.value}U,
""");
}
else
{
out.print("""
  .syspll_config.k_div = ${Instance.gint_mainpllk1div.value}U,
""");
}
out.print("""
  .syspll_config.mode = ${MainPllSet.get(Instance.gcombo_mainpllset.value)},
  .syspll_config.clksrc = ${PllClkSrc.get(Instance.gcombo_pllclksrc.value)},
  .enable_oschp = ${(Instance.gcombo_extclkmode.value == "External Crystal Mode") && ((Instance.gcombo_pllclksrc.value == "External Crystal High Precision Oscillator") || (Instance.gcombo_usbclksrc.value == "USB PLL Clock"))},
""");
out.print("""
  .enable_osculp = ${(Instance.gcombo_rtcclksrc.value == "External Crystal Ultra Low Power Oscillator") || (Instance.gcombo_standbyclksrc.value == "External Crystal Ultra Low Power Oscillator")}, 
""");
out.print("""
  .calibration_mode = ${BackClkTrim.get(Instance.gcombo_backupclktrim.value)},
  .fstdby_clksrc = ${StandbyClkSrc.get(Instance.gcombo_standbyclksrc.value)},
  .fsys_clksrc = ${SysClkSrc.get(Instance.gcombo_sysclksrc.value)},
  .fsys_clkdiv = ${Instance.gint_sysclkdiv.value}U,
  .fcpu_clkdiv = ${CPUDIV}U,
  .fccu_clkdiv = ${CAPCOMDIV}U,
  .fperipheral_clkdiv = ${PERIDIV}U
};
""");

out.print("""
/**
* @brief  Function to initialize the Clock Tree based on UI configuration
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup (void)
{
""");
if(EXTCLKOUTEN == 1)
{
out.print("""
  XMC_SCU_CLOCK_SetExternalOutputClockSource(${ExtClkOutSrc.get(Instance.gcombo_extclkoutsrc.value)});
  XMC_SCU_CLOCK_SetExternalOutputClockDivider(${Instance.gint_extclkplldiv.value}U);
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT${Instance.rg_extclkpin.getSolverUri().get(4)}_BASE, ${Instance.rg_extclkpin.getSolverUri().get(6)}U, &${appInst}_extclk_config);
""");
}
out.print("""
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&${appInst}_ScuClk);
  /* RTC source clock*/
  XMC_SCU_HIB_SetRtcClockSource(${RtcClkSrc.get(Instance.gcombo_rtcclksrc.value)});
""");
if(Instance.ggroup_usbfreq.visible == true)
{
out.print("""
  /* USB source clock*/
  XMC_SCU_CLOCK_SetUsbClockSource(${UsbClkSrc.get(Instance.gcombo_usbclksrc.value)});
  XMC_SCU_CLOCK_SetUsbClockDivider(${Instance.gint_usbdiv.value}U);
""");
if(Instance.gcombo_usbclksrc.value == "USB PLL Clock")
{
out.print("""
  XMC_SCU_CLOCK_StartUsbPll(${Instance.gint_usbpll_pdiv.value}U, ${Instance.gint_usbpll_ndiv.value}U);
""");
}
}

out.print("""
  XMC_SCU_CLOCK_SetWdtClockSource(${WdtClkSrc.get(Instance.gcombo_wdtclksrc.value)});
  XMC_SCU_CLOCK_SetWdtClockDivider(${Instance.ginteger_wdtclkdiv.value}U);
""");
if(Instance.ggroup_ebufreq.visible == true)
{
out.print("""
  XMC_SCU_CLOCK_SetEbuClockDivider(${EBUDIV}U);
""");
}
out.print("""
}
""");
 } /* End of for loop */
 