package Model.APPS.GLOBAL_SCU_XMC4.v4_0_0;

/*************** Revision History ****************************************************
 Version      Date          Description 
 
  4.0.0       16-Feb-2015   Initial version for DAVE v4
 ************************************************************************************/

// Import statements
import ifx.davex.app.manifest.*

class  GLOBAL_SCU_XMC4 extends GLOBAL_SCU_XMC4_GUI {

    // Note  : SCU properties are mandatory and important
    // Begin : SCU property section
    def version            = '4.0.0'

    def categoriesDescription = ["System/~Global Reg control"]// Minimum DAVE version required for the App
    def minDaveVersion        = '4.0.0'

    // Keywords to search in Apps selection view
    def keywords      =
    [
 		"all"
    ]

    // Software IDs and its required minimum version
    def softwareIDs       = [

        "XMC4.5.00.E144.ALL":"1.0.0","XMC4.5.00.F144.ALL":"1.0.0","XMC4.5.00.F100.ALL":"1.0.0",
        "XMC4.5.02.F100.ALL":"1.0.0","XMC4.5.04.F100.ALL":"1.0.0","XMC4.5.04.F144.ALL":"1.0.0",

        "XMC4.4.00.F100.ALL":"1.0.0","XMC4.4.00.F64.ALL":"1.0.0",
        "XMC4.4.02.F100.ALL":"1.0.0","XMC4.4.02.F64.ALL":"1.0.0",

        "XMC4.2.00.F64.ALL":"1.0.0","XMC4.2.00.Q48.ALL":"1.0.0",

        "XMC4.1.00.F64.ALL":"1.0.0","XMC4.1.00.Q48.ALL":"1.0.0",
        "XMC4.1.04.F64.ALL":"1.0.0","XMC4.1.04.Q48.ALL":"1.0.0",
        "XMC4.1.08.Q48.ALL":"1.0.0","XMC4.1.08.F64.ALL":"1.0.0"

    ]

    def singleton     = true
    def initProvider  = true
    def deprecated    = false
    def sharable      = true
    def ioApp         = false

    // App short description
    def description = "GLOBAL_SCU_XMC4 APP allows to register callback functions and to handle the service request Events."

    // End   : SCU property section

    // Begin : User variable section
    MVirtualResourceGroup hwres_global_scu_xmc4_node

    MVirtualSignal vs_nvic_signal_in

    MRequiredApp appres_cpu
    
    SolverVariable node_0
    SolverVariable node_1
    
    // End   : User variable section

    // SCU Constructor
    public GLOBAL_SCU_XMC4(DaveEnv daveEnv) {

        String family = daveEnv.project.selectedDevice.deviceId.family
        
        appres_cpu =  MRequiredApp("CPU_CTRL_XMC4", "CPU", RSHARABLE,"0.0.1")
         
        node_0 = SolverVariable();
        node_1 = SolverVariable();
        
        addLinearConstraint(node_1, node_0, 1);
		

        hwres_global_scu_xmc4_node =  MVirtualResourceGroup("NVIC Node", ["peripheral","cpu","0","nvic","interrupt",node_0], true)
        vs_nvic_signal_in =  MVirtualSignal(hwres_global_scu_xmc4_node, "sr_irq0",  "signal_in", true, false) /* required{}, exposeToUser{} */
        addUriElementRangeConstraint(node_0, MF({[0]}, List))
			
		ginterruptprio_priority.maxPriority = MF({
            Integer temp = appres_cpu.getVal(["gint_maxInterruptPreemptPriority", "value"]) as Integer
            return temp
           }, Integer)
			
		ginterruptprio_priority.maxSubPriority =  MF({
				Integer temp = appres_cpu.getVal(["gint_maxInterruptSubPriority", "value"]) as Integer
				return temp
			}, Integer)

    }

    // File Generation
    def generateFiles(){

        copy("global_scu_xmc4.c", "global_scu_xmc4.c")
        copy("global_scu_xmc4.h", "global_scu_xmc4.h")
        generate("global_scu_xmc4_confc.tmpl", "global_scu_xmc4_conf.c")
        generate("global_scu_xmc4_confh.tmpl", "global_scu_xmc4_conf.h")
        generate("global_scu_xmc4_externh.tmpl", "global_scu_xmc4_extern.h")
    }

}
