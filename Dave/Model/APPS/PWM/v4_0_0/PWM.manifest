package Model.APPS.PWM.v4_0_0;


/*************** Revision History **********************************************
Version        Date          Description 

  4.0.0       16-Feb-2015   Initial version for DAVEv4
*******************************************************************************/

import ifx.davex.app.manifest.*

class  PWM extends PWM_GUI {
	/*-----------------------------------Begin : APP property section---------------------------------------------------------*/

	def version            = '4.0.0'
	
	def categoriesDescription = ['General Purpose/Timed Signals'] ;

	def minDaveVersion           = '4.0.0' 
	
	// Keywords to search in Apps selection view
	def keywords      = [ 'Duty Cycle', 'PWM', 'period','frequency', 'CCU8', 'CCU4', 'all']
	
	def softwareIDs       = [ 
		"XMC4.5.00.E144.ALL":"1.0.0","XMC4.5.00.F144.ALL":"1.0.0","XMC4.5.00.F100.ALL":"1.0.0",
		"XMC4.5.02.F100.ALL":"1.0.0","XMC4.5.04.F100.ALL":"1.0.0","XMC4.5.04.F144.ALL":"1.0.0",
				
		"XMC4.4.00.F100.ALL":"1.0.0","XMC4.4.00.F64.ALL":"1.0.0",
		"XMC4.4.02.F100.ALL":"1.0.0","XMC4.4.02.F64.ALL":"1.0.0",

		"XMC4.2.00.F64.ALL":"1.0.0","XMC4.2.00.Q48.ALL":"1.0.0",
		"XMC4.1.00.F64.ALL":"1.0.0","XMC4.1.00.Q48.ALL":"1.0.0","XMC4.1.04.F64.ALL":"1.0.0",
		"XMC4.1.04.Q48.ALL":"1.0.0","XMC4.1.08.Q48.ALL":"1.0.0","XMC4.1.08.F64.ALL":"1.0.0",


		"XMC1.2.01.T028.ALL":"1.0.0","XMC1.2.01.T038.ALL":"1.0.0","XMC1.2.01.Q040.ALL":"1.0.0",
		"XMC1.2.02.T016.ALL":"1.0.0","XMC1.2.02.T028.ALL":"1.0.0","XMC1.2.02.T038.ALL":"1.0.0",
		"XMC1.2.02.Q024.ALL":"1.0.0","XMC1.2.02.Q040.ALL":"1.0.0","XMC1.2.00.T038.ALL":"1.0.0",
		"XMC1.2.03.T016.ALL":"1.0.0",
		
		"XMC1.3.01.Q024.ALL":"1.0.0","XMC1.3.01.Q040.ALL":"1.0.0","XMC1.3.01.T016.ALL":"1.0.0",
		"XMC1.3.01.T038.ALL":"1.0.0","XMC1.3.02.Q024.ALL":"1.0.0","XMC1.3.02.Q040.ALL":"1.0.0",
		"XMC1.3.02.T016.ALL":"1.0.0","XMC1.3.02.T038.ALL":"1.0.0",

		"XMC1.1.00.T016.ALL":"1.0.0","XMC1.1.00.T038.ALL":"1.0.0","XMC1.1.00.Q024.ALL":"1.0.0",
		"XMC1.1.00.Q040.ALL":"1.0.0"
    ]

	def singleton     = false
	def initProvider  = true
	def deprecated    = false
	def sharable      = false

	// App short description 
	def description = "Generates a PWM using one timer slice of CCU4 or CCU8"

	/*-----------------------------------End : APP property section----------------------------------------------------------------*/
	
	/*-----------------------------------Begin : APP User variable section---------------------------------------------------------*/

	MVirtualResourceGroup hwres_ccu8_cc8_slice

	
	MRequiredApp   pwm_app_global_ccu8_cc8     

	MVirtualSignal vs_pwm_ccu8_cc8_slice_global
	
	MVirtualSignal vs_pwm_ccu8_cc8_slice_comapre_match_interrupt
	MVirtualSignal vs_pwm_ccu8_cc8_slice_period_match_interrupt
	MVirtualSignal vs_pwm_ccu8_cc8_slice_st
	MVirtualSignal vs_pwm_ccu8_cc8_slice_out
	
	MVirtualSignalRA vs_pwm_ccu8_cc8_global
	
	MVirtualResourceGroup hwres_ccu4_cc4_slice
	
	MRequiredApp   pwm_app_global_ccu4_cc4
	MVirtualSignal vs_pwm_ccu4_cc4_slice_global
	
	MVirtualSignal vs_pwm_ccu4_cc4_slice_comapre_match_interrupt
	MVirtualSignal vs_pwm_ccu4_cc4_slice_period_match_interrupt
	MVirtualSignal vs_pwm_ccu4_cc4_slice_st
	MVirtualSignal vs_pwm_ccu4_cc4_slice_out 
	
	MVirtualSignalRA vs_pwm_ccu4_cc4_global

	MVirtualResourceGroup hwres_port_pad_pwm_out
	MVirtualSignal vs_pwm_out_pin
	
	// Begin : User variable section
    GFloat   Clock_MHz =              GFloat(widgetName: "Clock_MHz",value:1);
	GInteger Prescaler =              GInteger(widgetName: "Prescaler",value:0,minValue:0,maxValue:15);
	GInteger gint_Period_Register =   GInteger(widgetName:"gint_Period_Register", value:0);
	GFloat   Actual_Resolution_nsec = GFloat(widgetName: "Actual_Resolution_nsec",value:0);

	// End   : User variable section
	/*-----------------------------------End : APP User variable section---------------------------------------------------------*/
	// PWM Constructor
	public PWM(DaveEnv daveEnv) {
		
		String Family = daveEnv.project.selectedDevice.deviceId.family;
		String Series = daveEnv.project.selectedDevice.deviceId.series;
		String device = Family + Series;
		final String HZ = "Hz";
	 
		final String KHZ = "kHz";
	
		final String MHZ = "MHz";
		
		final String NSEC = "nsec";
	
		final String MSEC = "msec";
	
		final String USEC = "usec";
	
		final Integer PERIOD_16BIT_COUNTER_maxValue = (2.power(16)-1);
		final Integer PERIOD_32BIT_COUNTER_maxValue = (2.power(32)-1);
		final int PRESCALER_maxValue = 15
/*****************************************Solver Constraints *************************************************************************/

		MF PWM_MF_CCU4_selected;
		MF PWM_MF_CCU8_selected;
		PWM_MF_CCU4_selected = MF({gcombo_TimerSelect.value == "CCU4" }, Boolean)
		PWM_MF_CCU8_selected = MF({gcombo_TimerSelect.value == "CCU8" }, Boolean)
		
		MF mf_speed_class;
		mf_speed_class = MF({
			if (gcombo_driver_strength.value == "Weak Driver" || gcombo_driver_strength.value == "Medium Driver")
			{
				 ['A1', 'A1+', 'A2']
			}
			else if (gcombo_driver_strength.value == "Strong Driver Slow Edge")
			{
				 ['A1+']
			}
			else if (gcombo_driver_strength.value == "Strong Driver Soft Edge")
			{
				 ['A1+', 'A2']
			}
			else if(gcombo_driver_strength.value == "Strong Driver Medium Edge" || gcombo_driver_strength.value == "Strong Driver Sharp Edge")
			{
				 ['A2']
			}
			else
			{
				['A1','A1+' ,'A2']
			}
		}, List)
		
		/* ---------------------------------------------------------- */
		/* ------------ Hardware resource consumption block --------- */
		/* ---------------------------------------------------------- */
		
		hwres_ccu8_cc8_slice   = MVirtualResourceGroup("CC8 Slice", ["peripheral", "ccu8", "*", "cc8", "*"],PWM_MF_CCU8_selected);
	
		hwres_ccu4_cc4_slice   = MVirtualResourceGroup("CC4 Slice",["peripheral", "ccu4", "*", "cc4", "*"],PWM_MF_CCU4_selected);
		
		hwres_port_pad_pwm_out = MVirtualResourceGroup("PWM Output Pin",["port", "p", "*", "pad", "*"],true);
		
		
		/* ---------------------------------------------------------- */
		/* ------------ App consumption Block ----------------------- */
		/* ---------------------------------------------------------- */
					
		pwm_app_global_ccu8_cc8 = MRequiredApp("GLOBAL_CCU8","GLOBAL_CCU8", RSHARABLE, "0.0.1", PWM_MF_CCU8_selected);
		pwm_app_global_ccu4_cc4 = MRequiredApp("GLOBAL_CCU4","GLOBAL_CCU4", RSHARABLE, "0.0.1", PWM_MF_CCU4_selected);
		
		/* ---------------------------------------------------------- */
		/* -------------- APP IO Signals ---------------------------- */
		/* ---------------------------------------------------------- */

		vs_pwm_ccu8_cc8_global = MVirtualSignalRA(pwm_app_global_ccu8_cc8,"vs_global_ccu8_globalsignal");
		
		vs_pwm_ccu8_cc8_slice_global = MVirtualSignal(hwres_ccu8_cc8_slice,  "global_signal",    "global_signal", 
			                                              PWM_MF_CCU8_selected, false);

		
//	Outputs are conditional based on timer concatenation. outputs are form hwres_ccu8_cc8_slice_b if timer concatenation, else its hwres_ccu8_cc8_slice_a.
		vs_pwm_ccu8_cc8_slice_comapre_match_interrupt = MVirtualSignal(hwres_ccu8_cc8_slice,  "event_compare_match", "cmd1s_cmu1s", 
																		PWM_MF_CCU8_selected, true);
																	
		vs_pwm_ccu8_cc8_slice_period_match_interrupt  = MVirtualSignal(hwres_ccu8_cc8_slice,  "event_period_match", "pmus_omds",     
																		 PWM_MF_CCU8_selected, true);
																	 
		vs_pwm_ccu8_cc8_slice_st  = MVirtualSignal(hwres_ccu8_cc8_slice,  "timer_status","st",
													PWM_MF_CCU8_selected, true);
												
		vs_pwm_ccu8_cc8_slice_out = MVirtualSignal(hwres_ccu8_cc8_slice,  "pwm_output","out0",
													 PWM_MF_CCU8_selected, true);
		
		vs_pwm_ccu4_cc4_global =  MVirtualSignalRA(pwm_app_global_ccu4_cc4, "vs_global_ccu4_globalsignal")
		
		vs_pwm_ccu4_cc4_slice_global =MVirtualSignal(hwres_ccu4_cc4_slice,  "global_signal","global_signal",
													  PWM_MF_CCU4_selected, false);
		
//	Outputs are conditional based on timer concatenation. outputs are form hwres_ccu4_cc4_slice_b if timer concatenation, else its hwres_ccu4_cc4_slice.
		vs_pwm_ccu4_cc4_slice_comapre_match_interrupt = MVirtualSignal(hwres_ccu4_cc4_slice,  "event_compare_match","cmds_cmus", 
				  														PWM_MF_CCU4_selected, true);
																	  
		vs_pwm_ccu4_cc4_slice_period_match_interrupt  = MVirtualSignal(hwres_ccu4_cc4_slice,  "event_period_match","pmus_omds",  
				  														PWM_MF_CCU4_selected, true);
																	  
		vs_pwm_ccu4_cc4_slice_st  = MVirtualSignal(hwres_ccu4_cc4_slice,  "timer_status","st",   
					  								PWM_MF_CCU4_selected, true);
												  
		vs_pwm_ccu4_cc4_slice_out = MVirtualSignal(hwres_ccu4_cc4_slice,  "pwm_output","out",  
				      								PWM_MF_CCU4_selected, true);

		@AddPin
		vs_pwm_out_pin_AddPin =  MVirtualSignal( hwres_port_pad_pwm_out,"pwm_pad", "pad",true,false);

		/* ---------------------------------------------------------- */
		/* ---------------- APP IO Connections ---------------------- */
		/* ---------------------------------------------------------- */
		
		if(Family == "XMC4")
		{
			addResourcePropertyConstraint(hwres_port_pad_pwm_out, "speed_class of rg_property", mf_speed_class, true)
		}
		
		addConnectionConstraint(vs_pwm_ccu8_cc8_global, vs_pwm_ccu8_cc8_slice_global, PWM_MF_CCU8_selected );
				
		addConnectionConstraint(vs_pwm_ccu4_cc4_global,  vs_pwm_ccu4_cc4_slice_global, PWM_MF_CCU4_selected );

		addConnectionConstraint(vs_pwm_ccu4_cc4_slice_out, vs_pwm_out_pin, PWM_MF_CCU4_selected);

		addConnectionConstraint(vs_pwm_ccu8_cc8_slice_out, vs_pwm_out_pin, PWM_MF_CCU8_selected);


		/* -------------------------------------------------------- */
		/* ------------ APP Configuration ------------------------- */
		/* -------------------------------------------------------- */
		//     Test variables assigning.
		
		if(Family == "XMC1" )
		{
			gcombo_driver_strength.visible = false
			glabel_driver_strength.visible = false
		}
		if((device == "XMC12" ) || (device == "XMC11"))
		{
			gcombo_TimerSelect.value = MF({"CCU4"},String)
			gcombo_TimerSelect.enabled = false
		}
		
		
		Clock_MHz.value  = MF({if(gcombo_TimerSelect.value == "CCU4"){pwm_app_global_ccu4_cc4.getVal(["gfloat_clkFreq", "value"])}
								else if (gcombo_TimerSelect.value == "CCU8"){pwm_app_global_ccu8_cc8.getVal(["gfloat_clkFreq", "value"])}
								else (Double)120.0}, Float) // get clock form global app.

//		Clock_MHz.value  = 120;// for testing.
//		println "Clock_MHz   :"+ Clock_MHz.value;
/************************************************************************************************************************************/
		//XMC12 and XMC11 does not have CCU8 module. Hence timer selection is disabled.
		gcombo_TimerSelect.enabled = MF({!((Family == "XMC1" && Series == "2") ||
			                               (Family == "XMC1" && Series == "1"))    },Boolean);
		
/************************************************************************************************************************************/
			Prescaler.value = MF({
									Double FWM_Freq_MHz = 1;
									int prescaler_value = 0;
									FWM_Freq_MHz = unit2MHz (gint_PWM_Frequency.value, HZ);
																	
									while(prescaler_value < 16)
									{
										if((Clock_MHz.value / (2.power(prescaler_value) * FWM_Freq_MHz)) <PERIOD_16BIT_COUNTER_maxValue)
											break;
										else
											prescaler_value++;
									}
									if(prescaler_value > PRESCALER_maxValue) {
									  prescaler_value = PRESCALER_maxValue;
									}
									prescaler_value;}, Integer);
//		println "Prescaler.value :" + Prescaler.value ;
		
/************************************************************************************************************************************/
		    //calculate the actual resolution using the Prescaler.value for display to user.
			gfloat_Ac_Res.value = MF({
										Double Clock_Period = (1000 /Clock_MHz.value);  // convert to nsec
										Double Actual_Resolution = Clock_Period *  2.power(Prescaler.value); //(1 << Prescaler.value);//
										Actual_Resolution = Actual_Resolution.round(5);
										(Double) Actual_Resolution;}, Float);
			gfloat_Ac_Res.minValue = MF({Math.ceil(((Double) 1000 / Clock_MHz.value)) -1 },Double) ; // convert to nsec
			gfloat_Ac_Res.maxValue = MF({Math.ceil(((Double) (2.power(PRESCALER_maxValue) * ((Double)1000 / Clock_MHz.value)))) + 1},Double) ; // convert to nsec
//		println "gfloat_Ac_Res.value   :" + gfloat_Ac_Res.value;
		
/************************************************************************************************************************************/
		
			gint_Period_Register.minValue = MF({1},Integer);
			gint_Period_Register.maxValue = MF({ PERIOD_16BIT_COUNTER_maxValue }, Integer);  
			gint_Period_Register.value    = MF({
												Double FWM_Freq_MHz = 1;
												int Count = 0;
												FWM_Freq_MHz = unit2MHz (gint_PWM_Frequency.value, HZ);
												
												Count = (Integer)(Clock_MHz.value / (2.power(Prescaler.value) * FWM_Freq_MHz));
												
												if (!(Count >= gint_Period_Register.minValue && Count <= gint_Period_Register.maxValue))  // check if count not with in limit.
												{Count =1; }
												
												  Count-1;}, Integer);
											  
//		println "gint_Period_Register.minValue   :" + gint_Period_Register.minValue;
//		println "gint_Period_Register.maxValue   :" + gint_Period_Register.maxValue;
//		println "gint_Period_Register.value      :" + gint_Period_Register.value;
		
								  
/************************************************************************************************************************************/
            gint_PWM_Frequency.maxValue = MF({(Integer)MHz2unit( (Double)(Clock_MHz.value / 2),"Hz")}, Integer);
//			println "gint_PWM_Frequency.minValue :" + gint_PWM_Frequency.minValue;
//			println "gint_PWM_Frequency.maxValue :" + gint_PWM_Frequency.maxValue;
													
/************************************************************************************************************************************/
		gfloat_Duty_Cycle_Sym.enabled 	= MF({true}, Boolean);

	}
	
/************************************************************************************************************************************/
	Double nsec2unit(Double value , String unit){
	  int NSEC_1 = 1;
	  int MICRO_SEC_1000 = 1000;
	  int MILLI_SEC_1000000 = 1000000;
	  if (unit == "nsec" ){ return ( value / NSEC_1 ); }
	  else if (unit == "usec"){ return (value / MICRO_SEC_1000); }
	  else if (unit == "msec"){ return (value / MILLI_SEC_1000000); }
	}
/************************************************************************************************************************************/
	Double unit2nsec(Double value , String unit){
	  int NSEC_1 = 1;
	  int MICRO_SEC_1000 = 1000;
	  int MILLI_SEC_1000000 = 1000000;
	  if (unit == "nsec" ){ return ( value * NSEC_1); }
	  else if (unit == "usec"){ return (value * MICRO_SEC_1000); }
	  else if (unit == "msec"){ return (value * MILLI_SEC_1000000); }
	}
/************************************************************************************************************************************/
	Double unit2MHz(Double value , String unit){
	  int HZ_1000000 = 1000000;
	  int KHZ_1000 = 1000;
	  int MHZ_1 = 1;
	  if (unit == "MHz" ){ return ( value / MHZ_1); }
	  else if (unit == "kHz"){ return (value / KHZ_1000); }
	  else if (unit == "Hz"){ return (value / HZ_1000000); }
	}
/************************************************************************************************************************************/
	Double MHz2unit(Double value , String unit){
	  int HZ_1000000 = 1000000;
	  int KHZ_1000 = 1000;
	  int MHZ_1 = 1;
	  if (unit == "MHz" ){ return ( value * MHZ_1); }
	  else if (unit == "kHz"){ return (value * KHZ_1000); }
	  else if (unit == "Hz"){ return (value * HZ_1000000); }
	}
/************************************************************************************************************************************/
	// File Generation
	def generateFiles(){
		copy("pwm.c", "pwm.c")
		copy("pwm.h", "pwm.h")
		generate("pwm_confc.tmpl", "pwm_conf.c")
		generate("pwm_confh.tmpl", "pwm_conf.h")
		generate("pwm_externh.tmpl", "pwm_extern.h")
	}
		
}
