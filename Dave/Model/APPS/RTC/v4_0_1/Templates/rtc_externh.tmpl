package Model.APPS.RTC.v4_0_1.Templates;

import Model.APPS.RTC.v4_0_1.RTC

out.print("""
/*******************************************************************************
**                                                                            **
** Copyright (C) 2015 Infineon Technologies AG. All rights reserved.          **
**                                                                            **
** Infineon Technologies AG (Infineon) is supplying this software for use     **
** with Infineon's microcontrollers.                                          **
** This file can be freely distributed within development tools that are      **
** supporting such microcontrollers.                                          **
**                                                                            **
** THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS,IMPLIED  **
** OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF         **
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS         **
** SOFTWARE. INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR          **
** SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.  **
**                                                                            **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : APP Developer                                                   **
**                                                                            **
** NOTE     : Any Changes made to this file will be overwritten during Code   **
**            Generation                                                      **
**                                                                            **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
** Version History:                                                           **
********************************************************************************
** v4.0.0    16 Feb 2015  Initial version									  **
*******************************************************************************/

/*******************************************************************************
 *
 * @file rtc_extern.h
 *
 *
 * @brief Handle definitions are based on UI configuration for RTC APP
 *        Instances.
*/

#ifndef RTC_EXTERN_H
#define RTC_EXTERN_H

#ifdef __cplusplus
extern "C" {
#endif
/*****************************************************************************
 ** @Project Includes:                                                       **
 *****************************************************************************/
""");	
String appInst  = null;
String EventHandlerTimer = null;
String EventHandlerAlarm = null;

out.print("""
extern XMC_RTC_TIME_t timeptr;
extern XMC_RTC_ALARM_t alarmptr;""");
for (Object appIns : appInstancesList )
{
	appInst = appIns.getInstanceLabel()
out.print("""\nextern RTC_t ${appInst};""");
if(appIns.gstring_realtime_handler.enabled == true)
{
if(appIns.gcombo_eventtrigger_timer.value == "SCU Interrupt")
{
 EventHandlerTimer = appIns.gstring_realtime_handler.value
if(EventHandlerTimer != "")
{
out.print("""
/**
 * User defined function for Timer interrupt.
 *
 *
 * @return     void
 *
 *
 */
extern void ${EventHandlerTimer}(void);
""");
}
}
}

if(appIns.gcheck_alarm_enable.value == true)
{
if(appIns.gcombo_eventtrigger_alarm.value =="SCU Interrupt")
{
EventHandlerAlarm = appIns.gstring_alarm_event_handler.value
if(EventHandlerAlarm != "")
{
out.print("""
/**
 * User defined function for Alarm interrupt.
 *
 *
 * @return     void
 *
 *
 */
extern void ${EventHandlerAlarm}(void);
""");
} // end of if
} // end of if
}
} // end of for
out.print("""
#ifdef __cplusplus
}
#endif
	
#endif  /* ifndef RTC_EXTERN_H */
""");