<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UVBuild\web_pot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UVBuild\web_pot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu May 14 20:18:54 2015
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
webServer &rArr; net_main &rArr; net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[70]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">rt_alloc_box</a><BR>
 <LI><a href="#[1e3]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e3]">net_sys_error</a><BR>
 <LI><a href="#[199]">SystemCoreClockUpdate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[199]">SystemCoreClockUpdate</a><BR>
 <LI><a href="#[75]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">NMI_Handler</a><BR>
 <LI><a href="#[76]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">HardFault_Handler</a><BR>
 <LI><a href="#[77]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">MemManage_Handler</a><BR>
 <LI><a href="#[78]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">BusFault_Handler</a><BR>
 <LI><a href="#[79]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">UsageFault_Handler</a><BR>
 <LI><a href="#[7b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">DebugMon_Handler</a><BR>
 <LI><a href="#[7f]">ERU0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">ERU0_0_IRQHandler</a><BR>
 <LI><a href="#[80]">ERU0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80]">ERU0_1_IRQHandler</a><BR>
 <LI><a href="#[81]">ERU0_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ERU0_2_IRQHandler</a><BR>
 <LI><a href="#[82]">ERU0_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">ERU0_3_IRQHandler</a><BR>
 <LI><a href="#[83]">ERU1_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">ERU1_0_IRQHandler</a><BR>
 <LI><a href="#[84]">ERU1_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84]">ERU1_1_IRQHandler</a><BR>
 <LI><a href="#[85]">ERU1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">ERU1_2_IRQHandler</a><BR>
 <LI><a href="#[86]">ERU1_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">ERU1_3_IRQHandler</a><BR>
 <LI><a href="#[87]">PMU0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87]">PMU0_0_IRQHandler</a><BR>
 <LI><a href="#[88]">VADC0_C0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[88]">VADC0_C0_0_IRQHandler</a><BR>
 <LI><a href="#[89]">VADC0_C0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">VADC0_C0_1_IRQHandler</a><BR>
 <LI><a href="#[8a]">VADC0_C0_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">VADC0_C0_2_IRQHandler</a><BR>
 <LI><a href="#[8b]">VADC0_C0_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8b]">VADC0_C0_3_IRQHandler</a><BR>
 <LI><a href="#[8c]">VADC0_G0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">VADC0_G0_0_IRQHandler</a><BR>
 <LI><a href="#[8d]">VADC0_G0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8d]">VADC0_G0_1_IRQHandler</a><BR>
 <LI><a href="#[8e]">VADC0_G0_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">VADC0_G0_2_IRQHandler</a><BR>
 <LI><a href="#[8f]">VADC0_G0_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">VADC0_G0_3_IRQHandler</a><BR>
 <LI><a href="#[90]">VADC0_G1_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[90]">VADC0_G1_0_IRQHandler</a><BR>
 <LI><a href="#[91]">VADC0_G1_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">VADC0_G1_1_IRQHandler</a><BR>
 <LI><a href="#[92]">VADC0_G1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">VADC0_G1_2_IRQHandler</a><BR>
 <LI><a href="#[93]">VADC0_G1_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93]">VADC0_G1_3_IRQHandler</a><BR>
 <LI><a href="#[94]">VADC0_G2_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[94]">VADC0_G2_0_IRQHandler</a><BR>
 <LI><a href="#[95]">VADC0_G2_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[95]">VADC0_G2_1_IRQHandler</a><BR>
 <LI><a href="#[96]">VADC0_G2_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[96]">VADC0_G2_2_IRQHandler</a><BR>
 <LI><a href="#[97]">VADC0_G2_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[97]">VADC0_G2_3_IRQHandler</a><BR>
 <LI><a href="#[98]">VADC0_G3_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98]">VADC0_G3_0_IRQHandler</a><BR>
 <LI><a href="#[99]">VADC0_G3_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[99]">VADC0_G3_1_IRQHandler</a><BR>
 <LI><a href="#[9a]">VADC0_G3_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">VADC0_G3_2_IRQHandler</a><BR>
 <LI><a href="#[9b]">VADC0_G3_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9b]">VADC0_G3_3_IRQHandler</a><BR>
 <LI><a href="#[9c]">DSD0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">DSD0_0_IRQHandler</a><BR>
 <LI><a href="#[9d]">DSD0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">DSD0_1_IRQHandler</a><BR>
 <LI><a href="#[9e]">DSD0_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9e]">DSD0_2_IRQHandler</a><BR>
 <LI><a href="#[9f]">DSD0_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9f]">DSD0_3_IRQHandler</a><BR>
 <LI><a href="#[a0]">DSD0_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">DSD0_4_IRQHandler</a><BR>
 <LI><a href="#[a1]">DSD0_5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a1]">DSD0_5_IRQHandler</a><BR>
 <LI><a href="#[a2]">DSD0_6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">DSD0_6_IRQHandler</a><BR>
 <LI><a href="#[a3]">DSD0_7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3]">DSD0_7_IRQHandler</a><BR>
 <LI><a href="#[a4]">DAC0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4]">DAC0_0_IRQHandler</a><BR>
 <LI><a href="#[a5]">DAC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a5]">DAC0_1_IRQHandler</a><BR>
 <LI><a href="#[a6]">CCU40_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">CCU40_0_IRQHandler</a><BR>
 <LI><a href="#[a7]">CCU40_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a7]">CCU40_1_IRQHandler</a><BR>
 <LI><a href="#[a8]">CCU40_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">CCU40_2_IRQHandler</a><BR>
 <LI><a href="#[a9]">CCU40_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a9]">CCU40_3_IRQHandler</a><BR>
 <LI><a href="#[aa]">CCU41_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[aa]">CCU41_0_IRQHandler</a><BR>
 <LI><a href="#[ab]">CCU41_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ab]">CCU41_1_IRQHandler</a><BR>
 <LI><a href="#[ac]">CCU41_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ac]">CCU41_2_IRQHandler</a><BR>
 <LI><a href="#[ad]">CCU41_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">CCU41_3_IRQHandler</a><BR>
 <LI><a href="#[ae]">CCU42_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae]">CCU42_0_IRQHandler</a><BR>
 <LI><a href="#[af]">CCU42_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">CCU42_1_IRQHandler</a><BR>
 <LI><a href="#[b0]">CCU42_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b0]">CCU42_2_IRQHandler</a><BR>
 <LI><a href="#[b1]">CCU42_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b1]">CCU42_3_IRQHandler</a><BR>
 <LI><a href="#[b2]">CCU43_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b2]">CCU43_0_IRQHandler</a><BR>
 <LI><a href="#[b3]">CCU43_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b3]">CCU43_1_IRQHandler</a><BR>
 <LI><a href="#[b4]">CCU43_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4]">CCU43_2_IRQHandler</a><BR>
 <LI><a href="#[b5]">CCU43_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b5]">CCU43_3_IRQHandler</a><BR>
 <LI><a href="#[b6]">CCU80_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6]">CCU80_0_IRQHandler</a><BR>
 <LI><a href="#[b7]">CCU80_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b7]">CCU80_1_IRQHandler</a><BR>
 <LI><a href="#[b8]">CCU80_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8]">CCU80_2_IRQHandler</a><BR>
 <LI><a href="#[b9]">CCU80_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9]">CCU80_3_IRQHandler</a><BR>
 <LI><a href="#[ba]">CCU81_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ba]">CCU81_0_IRQHandler</a><BR>
 <LI><a href="#[bb]">CCU81_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">CCU81_1_IRQHandler</a><BR>
 <LI><a href="#[bc]">CCU81_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">CCU81_2_IRQHandler</a><BR>
 <LI><a href="#[bd]">CCU81_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bd]">CCU81_3_IRQHandler</a><BR>
 <LI><a href="#[be]">POSIF0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[be]">POSIF0_0_IRQHandler</a><BR>
 <LI><a href="#[bf]">POSIF0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bf]">POSIF0_1_IRQHandler</a><BR>
 <LI><a href="#[c0]">POSIF1_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c0]">POSIF1_0_IRQHandler</a><BR>
 <LI><a href="#[c1]">POSIF1_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c1]">POSIF1_1_IRQHandler</a><BR>
 <LI><a href="#[c2]">CAN0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2]">CAN0_0_IRQHandler</a><BR>
 <LI><a href="#[c3]">CAN0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">CAN0_1_IRQHandler</a><BR>
 <LI><a href="#[c4]">CAN0_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">CAN0_2_IRQHandler</a><BR>
 <LI><a href="#[c5]">CAN0_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">CAN0_3_IRQHandler</a><BR>
 <LI><a href="#[c6]">CAN0_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">CAN0_4_IRQHandler</a><BR>
 <LI><a href="#[c7]">CAN0_5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c7]">CAN0_5_IRQHandler</a><BR>
 <LI><a href="#[c8]">CAN0_6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8]">CAN0_6_IRQHandler</a><BR>
 <LI><a href="#[c9]">CAN0_7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c9]">CAN0_7_IRQHandler</a><BR>
 <LI><a href="#[ca]">USIC0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca]">USIC0_0_IRQHandler</a><BR>
 <LI><a href="#[cb]">USIC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cb]">USIC0_1_IRQHandler</a><BR>
 <LI><a href="#[cc]">USIC0_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cc]">USIC0_2_IRQHandler</a><BR>
 <LI><a href="#[cd]">USIC0_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">USIC0_3_IRQHandler</a><BR>
 <LI><a href="#[ce]">USIC0_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">USIC0_4_IRQHandler</a><BR>
 <LI><a href="#[cf]">USIC0_5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf]">USIC0_5_IRQHandler</a><BR>
 <LI><a href="#[d0]">USIC1_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">USIC1_0_IRQHandler</a><BR>
 <LI><a href="#[d1]">USIC1_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d1]">USIC1_1_IRQHandler</a><BR>
 <LI><a href="#[d2]">USIC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">USIC1_2_IRQHandler</a><BR>
 <LI><a href="#[d3]">USIC1_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d3]">USIC1_3_IRQHandler</a><BR>
 <LI><a href="#[d4]">USIC1_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d4]">USIC1_4_IRQHandler</a><BR>
 <LI><a href="#[d5]">USIC1_5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d5]">USIC1_5_IRQHandler</a><BR>
 <LI><a href="#[d6]">USIC2_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d6]">USIC2_0_IRQHandler</a><BR>
 <LI><a href="#[d7]">USIC2_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d7]">USIC2_1_IRQHandler</a><BR>
 <LI><a href="#[d8]">USIC2_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8]">USIC2_2_IRQHandler</a><BR>
 <LI><a href="#[d9]">USIC2_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d9]">USIC2_3_IRQHandler</a><BR>
 <LI><a href="#[da]">USIC2_4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[da]">USIC2_4_IRQHandler</a><BR>
 <LI><a href="#[db]">USIC2_5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[db]">USIC2_5_IRQHandler</a><BR>
 <LI><a href="#[dc]">LEDTS0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dc]">LEDTS0_0_IRQHandler</a><BR>
 <LI><a href="#[dd]">FCE0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dd]">FCE0_0_IRQHandler</a><BR>
 <LI><a href="#[de]">GPDMA0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[de]">GPDMA0_0_IRQHandler</a><BR>
 <LI><a href="#[df]">SDMMC0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">SDMMC0_0_IRQHandler</a><BR>
 <LI><a href="#[e0]">USB0_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e0]">USB0_0_IRQHandler</a><BR>
 <LI><a href="#[e2]">GPDMA1_0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e2]">GPDMA1_0_IRQHandler</a><BR>
 <LI><a href="#[119]">eth_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[119]">eth_thread</a><BR>
 <LI><a href="#[264]">str_up_case</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[264]">str_up_case</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[78]">BusFault_Handler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[5]">BusFault_Handler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c2]">CAN0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[4f]">CAN0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c3]">CAN0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[50]">CAN0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c4]">CAN0_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[51]">CAN0_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c5]">CAN0_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[52]">CAN0_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c6]">CAN0_4_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[53]">CAN0_4_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c7]">CAN0_5_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[54]">CAN0_5_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c8]">CAN0_6_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[55]">CAN0_6_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c9]">CAN0_7_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[56]">CAN0_7_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a6]">CCU40_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[33]">CCU40_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a7]">CCU40_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[34]">CCU40_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a8]">CCU40_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[35]">CCU40_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a9]">CCU40_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[36]">CCU40_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[aa]">CCU41_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[37]">CCU41_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[ab]">CCU41_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[38]">CCU41_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[ac]">CCU41_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[39]">CCU41_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[ad]">CCU41_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[3a]">CCU41_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[ae]">CCU42_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[3b]">CCU42_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[af]">CCU42_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[3c]">CCU42_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b0]">CCU42_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[3d]">CCU42_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b1]">CCU42_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[3e]">CCU42_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b2]">CCU43_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[3f]">CCU43_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b3]">CCU43_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[40]">CCU43_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b4]">CCU43_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[41]">CCU43_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b5]">CCU43_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[42]">CCU43_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b6]">CCU80_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[43]">CCU80_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b7]">CCU80_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[44]">CCU80_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b8]">CCU80_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[45]">CCU80_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[b9]">CCU80_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[46]">CCU80_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[ba]">CCU81_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[47]">CCU81_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[bb]">CCU81_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[48]">CCU81_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[bc]">CCU81_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[49]">CCU81_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[bd]">CCU81_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[4a]">CCU81_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a4]">DAC0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[31]">DAC0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a5]">DAC0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[32]">DAC0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[9c]">DSD0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[29]">DSD0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[9d]">DSD0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[2a]">DSD0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[9e]">DSD0_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[2b]">DSD0_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[9f]">DSD0_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[2c]">DSD0_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a0]">DSD0_4_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[2d]">DSD0_4_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a1]">DSD0_5_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[2e]">DSD0_5_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a2]">DSD0_6_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[2f]">DSD0_6_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[a3]">DSD0_7_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[30]">DSD0_7_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[7b]">DebugMon_Handler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[8]">DebugMon_Handler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[7f]">ERU0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[c]">ERU0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[80]">ERU0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[d]">ERU0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[81]">ERU0_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[e]">ERU0_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[82]">ERU0_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[f]">ERU0_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[83]">ERU1_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[10]">ERU1_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[84]">ERU1_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[11]">ERU1_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[85]">ERU1_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[12]">ERU1_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[86]">ERU1_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[13]">ERU1_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[e1]">ETH0_0_IRQHandler</a> from eth_mac.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[6e]">ETH0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[10d]">ETH_MAC_Control</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[10c]">ETH_MAC_ControlTimer</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[100]">ETH_MAC_GetCapabilities</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[104]">ETH_MAC_GetMacAddress</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[109]">ETH_MAC_GetRxFrameSize</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[10a]">ETH_MAC_GetRxFrameTime</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[10b]">ETH_MAC_GetTxFrameTime</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[ff]">ETH_MAC_GetVersion</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[101]">ETH_MAC_Initialize</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[10e]">ETH_MAC_PHY_Read</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[10f]">ETH_MAC_PHY_Write</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[103]">ETH_MAC_PowerControl</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[108]">ETH_MAC_ReadFrame</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[107]">ETH_MAC_SendFrame</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[106]">ETH_MAC_SetAddressFilter</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[105]">ETH_MAC_SetMacAddress</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[102]">ETH_MAC_Uninitialize</a> from eth_mac.o(.text) referenced from eth_mac.o(.constdata)
 <LI><a href="#[dd]">FCE0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[6a]">FCE0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[de]">GPDMA0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[6b]">GPDMA0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[e2]">GPDMA1_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[6f]">GPDMA1_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[117]">GetLinkInfo</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[116]">GetLinkState</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[110]">GetVersion</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[76]">HardFault_Handler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[3]">HardFault_Handler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[118]">IRQ_HourPassed</a> from main.o(.text) referenced from rtc_conf.o(.constdata)
 <LI><a href="#[111]">Initialize</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[dc]">LEDTS0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[69]">LEDTS0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[77]">MemManage_Handler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[4]">MemManage_Handler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[75]">NMI_Handler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[2]">NMI_Handler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[87]">PMU0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[14]">PMU0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[be]">POSIF0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[4b]">POSIF0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[bf]">POSIF0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[4c]">POSIF0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c0]">POSIF1_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[4d]">POSIF1_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[c1]">POSIF1_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[4e]">POSIF1_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[7c]">PendSV_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[9]">PendSV_Handler_Veneer</a> from hal_cm4.o(.emb_text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[113]">PowerControl</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[1]">Reset_Handler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[7e]">SCU_0_IRQHandler</a> from global_scu_xmc4.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[b]">SCU_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[df]">SDMMC0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[6c]">SDMMC0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[7a]">SVC_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[7]">SVC_Handler_Veneer</a> from hal_cm4.o(.emb_text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[114]">SetInterface</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[115]">SetMode</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[7d]">SysTick_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[a]">SysTick_Handler_Veneer</a> from hal_cm4.o(.emb_text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[72]">SystemInit</a> from system_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[73]">SystemInit_DAVE3</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[e0]">USB0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[6d]">USB0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[ca]">USIC0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[57]">USIC0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[cb]">USIC0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[58]">USIC0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[cc]">USIC0_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[59]">USIC0_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[cd]">USIC0_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[5a]">USIC0_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[ce]">USIC0_4_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[5b]">USIC0_4_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[cf]">USIC0_5_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[5c]">USIC0_5_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d0]">USIC1_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[5d]">USIC1_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d1]">USIC1_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[5e]">USIC1_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d2]">USIC1_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[5f]">USIC1_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d3]">USIC1_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[60]">USIC1_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d4]">USIC1_4_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[61]">USIC1_4_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d5]">USIC1_5_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[62]">USIC1_5_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d6]">USIC2_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[63]">USIC2_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d7]">USIC2_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[64]">USIC2_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d8]">USIC2_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[65]">USIC2_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[d9]">USIC2_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[66]">USIC2_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[da]">USIC2_4_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[67]">USIC2_4_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[db]">USIC2_5_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[68]">USIC2_5_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[112]">Uninitialize</a> from eth_phy_ksz8031.o(.text) referenced from eth_phy_ksz8031.o(.constdata)
 <LI><a href="#[79]">UsageFault_Handler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[6]">UsageFault_Handler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[88]">VADC0_C0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[15]">VADC0_C0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[89]">VADC0_C0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[16]">VADC0_C0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[8a]">VADC0_C0_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[17]">VADC0_C0_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[8b]">VADC0_C0_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[18]">VADC0_C0_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[8c]">VADC0_G0_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[19]">VADC0_G0_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[8d]">VADC0_G0_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[1a]">VADC0_G0_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[8e]">VADC0_G0_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[1b]">VADC0_G0_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[8f]">VADC0_G0_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[1c]">VADC0_G0_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[90]">VADC0_G1_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[1d]">VADC0_G1_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[91]">VADC0_G1_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[1e]">VADC0_G1_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[92]">VADC0_G1_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[1f]">VADC0_G1_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[93]">VADC0_G1_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[20]">VADC0_G1_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[94]">VADC0_G2_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[21]">VADC0_G2_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[95]">VADC0_G2_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[22]">VADC0_G2_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[96]">VADC0_G2_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[23]">VADC0_G2_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[97]">VADC0_G2_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[24]">VADC0_G2_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[98]">VADC0_G3_0_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[25]">VADC0_G3_0_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[99]">VADC0_G3_1_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[26]">VADC0_G3_1_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[9a]">VADC0_G3_2_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[27]">VADC0_G3_2_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[9b]">VADC0_G3_3_IRQHandler</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[28]">VADC0_G3_3_IRQHandler_Veneer</a> from startup_xmc4500.o(.text) referenced from startup_xmc4500.o(RESET)
 <LI><a href="#[74]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_xmc4500.o(.text)
 <LI><a href="#[e3]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[e4]">dhcp_listener</a> from net_dhcp_client.o(i.dhcp_listener) referenced from net_dhcp_client.o(i.dhcp_client_init)
 <LI><a href="#[e5]">eth_notify</a> from net_eth.o(i.eth_notify) referenced from net_eth.o(i.eth_init_link)
 <LI><a href="#[119]">eth_thread</a> from net_eth.o(i.eth_thread) referenced from net_eth.o(.constdata)
 <LI><a href="#[e6]">http_listener</a> from net_http_server.o(i.http_listener) referenced from net_http_server.o(i.http_server_init)
 <LI><a href="#[0]">main</a> from main.o(.text) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[e7]">nbns_listener</a> from net_nbns_client.o(i.nbns_listener) referenced from net_nbns_client.o(i.nbns_client_init)
 <LI><a href="#[11a]">net_timer_tick</a> from net_sys.o(i.net_timer_tick) referenced from net_sys.o(.constdata)
 <LI><a href="#[fa]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[fe]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[f9]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[fb]">pump</a> from thread_pump.o(.text) referenced from thread_pump.o(.constdata)
 <LI><a href="#[70]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[71]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[fc]">sensors</a> from thread_sensors.o(.text) referenced from thread_sensors.o(.constdata)
 <LI><a href="#[e8]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[e9]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[ea]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[eb]">svcKernelSysTick</a> from rt_cmsis.o(i.svcKernelSysTick) referenced from rt_cmsis.o(i.osKernelSysTick)
 <LI><a href="#[ec]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[ed]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[ee]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[ef]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[f0]">svcSignalSet</a> from rt_cmsis.o(i.svcSignalSet) referenced from rt_cmsis.o(i.osSignalSet)
 <LI><a href="#[f1]">svcSignalWait</a> from rt_cmsis.o(i.svcSignalWait) referenced from rt_cmsis.o(i.osSignalWait)
 <LI><a href="#[f2]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[f3]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[f4]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[f5]">svcThreadYield</a> from rt_cmsis.o(i.svcThreadYield) referenced from rt_cmsis.o(i.osThreadYield)
 <LI><a href="#[f6]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
 <LI><a href="#[f7]">svcTimerCreate</a> from rt_cmsis.o(i.svcTimerCreate) referenced from rt_cmsis.o(i.osTimerCreate)
 <LI><a href="#[f8]">svcTimerStart</a> from rt_cmsis.o(i.svcTimerStart) referenced from rt_cmsis.o(i.osTimerStart)
 <LI><a href="#[fd]">webServer</a> from thread_webserver.o(.text) referenced from thread_webserver.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2b2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[11b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ef]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2b4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2b5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2b6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11d]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2b7]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[292]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[2b8]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[2b9]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ba]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[7a]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler_Veneer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler_Veneer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler_Veneer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[20f]"></a>dhcp_client_notify</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_client_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[118]"></a>IRQ_HourPassed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IRQ_HourPassed &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watering_isItTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_conf.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = main &rArr; DAVE_Init &rArr; ADC_MEASUREMENT_Init &rArr; GLOBAL_ADC_Init &rArr; XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_WebServer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_Sensors
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_Pump
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAVE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[129]"></a>Init_Thread_Pump</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, thread_pump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Thread_Pump &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>pump</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, thread_pump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pump &rArr; PWM_SetDutyCycle &rArr; PWM_lCCU4_SetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDutyCycle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_pump.o(.constdata)
</UL>
<P><STRONG><a name="[2bb]"></a>watering_setTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread_pump.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>watering_daysSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_pump.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>watering_daysReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_pump.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>watering_isItTime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread_pump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = watering_isItTime &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_HourPassed
</UL>

<P><STRONG><a name="[2be]"></a>computePumpOnTicks</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, thread_pump.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>watering_setWeekAmount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread_pump.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>Init_Thread_Sensors</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, thread_sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Thread_Sensors &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>sensors_measureData</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread_sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sensors_measureData &rArr; ADC_MEASUREMENT_StartConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_StartConversion
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_GetResult
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors
</UL>

<P><STRONG><a name="[fc]"></a>sensors</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, thread_sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sensors &rArr; sensors_measureData &rArr; ADC_MEASUREMENT_StartConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_measureData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_sensors.o(.constdata)
</UL>
<P><STRONG><a name="[2c0]"></a>sensors_setCheckInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_sensors.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>Init_Thread_WebServer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, thread_webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Thread_WebServer &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>webServer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread_webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = webServer &rArr; net_main &rArr; net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_webserver.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>data_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logging_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors
</UL>

<P><STRONG><a name="[2c1]"></a>data_Read</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, logging_system.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>cgi_process_query</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, http_server_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cgi_process_query &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_env_var
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[13b]"></a>cgi_process_data</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, http_server_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_env_var
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[13c]"></a>cgi_script</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, http_server_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cgi_script &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[223]"></a>cgx_content_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, http_server_cgi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[224]"></a>http_encoding</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, http_server_cgi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[13f]"></a>imageFileInfo</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imageFileInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[f9]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[27f]"></a>os_error</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[145]"></a>GetEthernetClockFrequency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_PowerControl
</UL>

<P><STRONG><a name="[e1]"></a>ETH0_0_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2c2]"></a>ADC_MEASUREMENT_GetAppVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adc_measurement.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>ADC_MEASUREMENT_Init</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, adc_measurement.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ADC_MEASUREMENT_Init &rArr; GLOBAL_ADC_Init &rArr; XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_ChannelInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_InputClassInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_ADC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundTriggerConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAVE_Init
</UL>

<P><STRONG><a name="[134]"></a>ADC_MEASUREMENT_StartConversion</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc_measurement.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_MEASUREMENT_StartConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundTriggerConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_measureData
</UL>

<P><STRONG><a name="[135]"></a>ADC_MEASUREMENT_GetResult</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_measurement.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_MEASUREMENT_GetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_measureData
</UL>

<P><STRONG><a name="[2c3]"></a>ADC_MEASUREMENT_GetDetailedResult</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc_measurement.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>CLOCK_XMC4_GetDriverVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clock_xmc4.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>OSCHP_GetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock_xmc4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbPllClockFrequency
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableHighPerformanceOscillator
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[150]"></a>SystemCoreClockSetup</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock_xmc4_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SystemCoreClockSetup &rArr; XMC_SCU_CLOCK_Init &rArr; XMC_SCU_CLOCK_StartSystemPll &rArr; XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_SetRtcClockSource
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartUsbPll
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetWdtClockSource
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetWdtClockDivider
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetUsbClockSource
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetUsbClockDivider
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetEbuClockDivider
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2c5]"></a>CPU_CTRL_XMC4_GetAppVersion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cpu_ctrl_xmc4.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>CPU_CTRL_XMC4_Init</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, cpu_ctrl_xmc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CPU_CTRL_XMC4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_SCU_XMC4_Init
</UL>

<P><STRONG><a name="[128]"></a>DAVE_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DAVE_Init &rArr; ADC_MEASUREMENT_Init &rArr; GLOBAL_ADC_Init &rArr; XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIGITAL_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c6]"></a>DIGITAL_IO_GetAppVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, digital_io.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>DIGITAL_IO_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, digital_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DIGITAL_IO_Init &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAVE_Init
</UL>

<P><STRONG><a name="[2c7]"></a>GLOBAL_ADC_GetAppVersion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, global_adc.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>GLOBAL_ADC_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, global_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GLOBAL_ADC_Init &rArr; XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_SetPowerMode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_StartupCalibration
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_Init
</UL>

<P><STRONG><a name="[2c8]"></a>GLOBAL_CCU4_GetAppVersion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, global_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>GLOBAL_CCU4_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, global_ccu4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GLOBAL_CCU4_Init &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_CCU4_lDeassertReset &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>

<P><STRONG><a name="[2c9]"></a>GLOBAL_SCU_XMC4_GetAppVersion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, global_scu_xmc4.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>GLOBAL_SCU_XMC4_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, global_scu_xmc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GLOBAL_SCU_XMC4_Init &rArr; CPU_CTRL_XMC4_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CTRL_XMC4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[164]"></a>GLOBAL_SCU_XMC4_RegisterCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, global_scu_xmc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GLOBAL_SCU_XMC4_RegisterCallback &rArr; XMC_SCU_INTERRUPT_SetEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_INTERRUPT_SetEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_lRegister_Callbacks
</UL>

<P><STRONG><a name="[7e]"></a>SCU_0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, global_scu_xmc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCU_0_IRQHandler &rArr; XMC_SCU_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[167]"></a>PWM_lCCU4_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_lCCU4_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
</UL>

<P><STRONG><a name="[12f]"></a>PWM_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Start &rArr; PWM_lCCU4_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>

<P><STRONG><a name="[168]"></a>PWM_lCCU4_ConfigInterrupts</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_lCCU4_ConfigInterrupts &rArr; XMC_CCU4_SLICE_SetInterruptNode
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetInterruptNode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_EnableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>

<P><STRONG><a name="[16b]"></a>PWM_lCCU4_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PWM_lCCU4_Init &rArr; GLOBAL_CCU4_Init &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_CCU4_lDeassertReset &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CompareInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableShadowTransfer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_ConfigInterrupts
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCompareMatch
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerPeriodMatch
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_CCU4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[178]"></a>PWM_lCCU4_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_lCCU4_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Stop
</UL>

<P><STRONG><a name="[170]"></a>PWM_lCCU4_SetDutyCycle</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_lCCU4_SetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableShadowTransfer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCompareMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDutyCycle
</UL>

<P><STRONG><a name="[171]"></a>PWM_lCCU4_SetFreq</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetPrescaler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableShadowTransfer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCompareMatch
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerPeriodMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFreq
</UL>

<P><STRONG><a name="[173]"></a>PWM_lCCU4_SetFreqAndDutyCycle</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetPrescaler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableShadowTransfer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCompareMatch
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerPeriodMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFreqAndDutyCycle
</UL>

<P><STRONG><a name="[174]"></a>PWM_lCCU4_GetInterruptStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_GetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetInterruptStatus
</UL>

<P><STRONG><a name="[17d]"></a>PWM_lCCU4_AcknowledgeInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AcknowledgeInterrupt
</UL>

<P><STRONG><a name="[176]"></a>PWM_lCCU4_SetPassiveLevel</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetPassiveLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetPassiveLevel
</UL>

<P><STRONG><a name="[2ca]"></a>PWM_GetAppVersion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>PWM_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PWM_Init &rArr; PWM_lCCU4_Init &rArr; GLOBAL_CCU4_Init &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_CCU4_lDeassertReset &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAVE_Init
</UL>

<P><STRONG><a name="[130]"></a>PWM_Stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Stop &rArr; PWM_lCCU4_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump
</UL>

<P><STRONG><a name="[12e]"></a>PWM_SetDutyCycle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWM_SetDutyCycle &rArr; PWM_lCCU4_SetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump
</UL>

<P><STRONG><a name="[179]"></a>PWM_SetFreq</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreq
</UL>

<P><STRONG><a name="[17a]"></a>PWM_SetFreqAndDutyCycle</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreqAndDutyCycle
</UL>

<P><STRONG><a name="[2cb]"></a>PWM_GetTimerStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>PWM_GetInterruptStatus</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_GetInterruptStatus
</UL>

<P><STRONG><a name="[17c]"></a>PWM_AcknowledgeInterrupt</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_AcknowledgeInterrupt
</UL>

<P><STRONG><a name="[17e]"></a>PWM_SetPassiveLevel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetPassiveLevel
</UL>

<P><STRONG><a name="[2cc]"></a>RTC_GetAppVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>RTC_lRegister_Callbacks</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_lRegister_Callbacks &rArr; GLOBAL_SCU_XMC4_RegisterCallback &rArr; XMC_SCU_INTERRUPT_SetEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_SCU_XMC4_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[180]"></a>RTC_lConfigureInterrupts</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_lConfigureInterrupts &rArr; XMC_RTC_EnableEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_EnableEvent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_INTERRUPT_EnableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[15a]"></a>RTC_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_Init &rArr; XMC_RTC_Init &rArr; XMC_SCU_HIB_EnableHibernateDomain &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Start
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_lConfigureInterrupts
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_lRegister_Callbacks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_SCU_XMC4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAVE_Init
</UL>

<P><STRONG><a name="[185]"></a>RTC_SetTime</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_SetTime
</UL>

<P><STRONG><a name="[132]"></a>RTC_GetTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watering_isItTime
</UL>

<P><STRONG><a name="[188]"></a>RTC_SetAlarmTime</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_SetAlarm
</UL>

<P><STRONG><a name="[18a]"></a>RTC_GetAlarmTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_GetAlarm
</UL>

<P><STRONG><a name="[18c]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_GetEventStatus
</UL>

<P><STRONG><a name="[18f]"></a>RTC_lleapyear</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time
</UL>

<P><STRONG><a name="[18e]"></a>RTC_Time</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_GetTime
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_lleapyear
</UL>

<P><STRONG><a name="[143]"></a>XMC_GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, xmc4_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_Initialize
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIGITAL_IO_Init
</UL>

<P><STRONG><a name="[2cd]"></a>XMC_GPIO_SetOutputStrength</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, xmc4_gpio.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>XMC_RTC_Enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, xmc4_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnableHibernateDomain
</UL>

<P><STRONG><a name="[2ce]"></a>XMC_RTC_Disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xmc4_rtc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>XMC_RTC_IsEnabled</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, xmc4_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_IsHibernateDomainEnabled
</UL>

<P><STRONG><a name="[183]"></a>XMC_RTC_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, xmc4_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XMC_RTC_Init &rArr; XMC_SCU_HIB_EnableHibernateDomain &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_IsHibernateDomainEnabled
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnableHibernateDomain
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_SetPrescaler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[181]"></a>XMC_RTC_EnableEvent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xmc4_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_RTC_EnableEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_lConfigureInterrupts
</UL>

<P><STRONG><a name="[196]"></a>XMC_RTC_DisableEvent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xmc4_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>

<P><STRONG><a name="[197]"></a>XMC_RTC_ClearEvent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xmc4_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>

<P><STRONG><a name="[2cf]"></a>XMC_SCU_GetBootMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>XMC_SCU_SetBootMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>XMC_SCU_ReadGPR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>XMC_SCU_WriteGPR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>XMC_SCU_EnableOutOfRangeComparator</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>XMC_SCU_DisableOutOfRangeComparator</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>XMC_SCU_CalibrateTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>XMC_SCU_EnableTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>XMC_SCU_DisableTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>XMC_SCU_IsTemperatureSensorEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetTemperature
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_StartTemperatureMeasurement
</UL>

<P><STRONG><a name="[2d8]"></a>XMC_SCU_IsTemperatureSensorReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>XMC_SCU_IsTemperatureSensorBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_StartTemperatureMeasurement
</UL>

<P><STRONG><a name="[19a]"></a>XMC_SCU_StartTemperatureMeasurement</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IsTemperatureSensorBusy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IsTemperatureSensorEnabled
</UL>

<P><STRONG><a name="[19d]"></a>XMC_SCU_GetTemperature</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IsTemperatureSensorEnabled
</UL>

<P><STRONG><a name="[2d9]"></a>XMC_SCU_WriteToRetentionMemory</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>XMC_SCU_ReadFromRetentionMemory</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>XMC_SCU_CLOCK_SetSystemClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[19e]"></a>XMC_SCU_CLOCK_StepSystemPllFrequency</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[1a0]"></a>XMC_SCU_CLOCK_SetSystemPllClockSource</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[19f]"></a>XMC_SCU_CLOCK_StartSystemPll</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = XMC_SCU_CLOCK_StartSystemPll &rArr; XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemPllClockSource
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StepSystemPllFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1ac]"></a>XMC_SCU_CLOCK_EnableSystemPll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1ab]"></a>XMC_SCU_CLOCK_DisableSystemPll</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1a2]"></a>XMC_SCU_CLOCK_EnableHighPerformanceOscillator</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_CLOCK_EnableHighPerformanceOscillator
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1aa]"></a>XMC_SCU_CLOCK_SetPeripheralClockDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1a9]"></a>XMC_SCU_CLOCK_SetCcuClockDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1a8]"></a>XMC_SCU_CLOCK_SetCpuClockDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1a7]"></a>XMC_SCU_CLOCK_SetSystemClockDivider</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1a3]"></a>XMC_SCU_CLOCK_SetBackupClockCalibrationMode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XMC_SCU_CLOCK_SetBackupClockCalibrationMode &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1a6]"></a>XMC_SCU_HIB_SetStandbyClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[1a4]"></a>XMC_SCU_CLOCK_EnableLowPowerOscillator</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XMC_SCU_CLOCK_EnableLowPowerOscillator &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[191]"></a>XMC_SCU_HIB_EnableHibernateDomain</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XMC_SCU_HIB_EnableHibernateDomain &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Enable
</UL>

<P><STRONG><a name="[151]"></a>XMC_SCU_CLOCK_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = XMC_SCU_CLOCK_Init &rArr; XMC_SCU_CLOCK_StartSystemPll &rArr; XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableLowPowerOscillator
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_SetStandbyClockSource
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetBackupClockCalibrationMode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemClockDivider
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCpuClockDivider
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCcuClockDivider
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetPeripheralClockDivider
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableHighPerformanceOscillator
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_DisableSystemPll
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableSystemPll
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemClockSource
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnableHibernateDomain
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[2db]"></a>XMC_SCU_TRAP_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>XMC_SCU_TRAP_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>XMC_SCU_TRAP_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>XMC_SCU_TRAP_Trigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>XMC_SCU_TRAP_ClearStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>XMC_SCU_PARITY_ClearStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>XMC_SCU_PARITY_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>XMC_SCU_PARITY_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>XMC_SCU_PARITY_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>XMC_SCU_PARITY_EnableTrapGeneration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>XMC_SCU_PARITY_DisableTrapGeneration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>XMC_SCU_INTERRUPT_EnableNmiRequest</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>XMC_SCU_INTERRUPT_DisableNmiRequest</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>XMC_SCU_RESET_AssertPeripheralReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_lAssertReset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_DisableModule
</UL>

<P><STRONG><a name="[1b7]"></a>XMC_SCU_RESET_DeassertPeripheralReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_lDeassertReset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_EnableModule
</UL>

<P><STRONG><a name="[2e8]"></a>XMC_SCU_RESET_IsPeripheralResetAsserted</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[1ae]"></a>XMC_SCU_CLOCK_GetSystemPllClockFrequency</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetExternalOutputClockFrequency
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetWdtClockFrequency
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetEbuClockFrequency
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbClockFrequency
</UL>

<P><STRONG><a name="[1af]"></a>XMC_SCU_CLOCK_GetUsbPllClockFrequency</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetExternalOutputClockFrequency
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbClockFrequency
</UL>

<P><STRONG><a name="[1b0]"></a>XMC_SCU_CLOCK_GetCcuClockFrequency</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemClockFrequency
</UL>

<P><STRONG><a name="[1b2]"></a>XMC_SCU_CLOCK_GetUsbClockFrequency</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbPllClockFrequency
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[1b3]"></a>XMC_SCU_CLOCK_GetEbuClockFrequency</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[1b4]"></a>XMC_SCU_CLOCK_GetWdtClockFrequency</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[1b5]"></a>XMC_SCU_CLOCK_GetExternalOutputClockFrequency</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbPllClockFrequency
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemClockFrequency
</UL>

<P><STRONG><a name="[2e9]"></a>XMC_SCU_CLOCK_GetPeripheralClockFrequency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>XMC_SCU_CLOCK_SetUsbClockSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[156]"></a>XMC_SCU_CLOCK_SetWdtClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[2ea]"></a>XMC_SCU_CLOCK_SetExternalOutputClockSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>XMC_SCU_HIB_SetRtcClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[154]"></a>XMC_SCU_CLOCK_SetUsbClockDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[158]"></a>XMC_SCU_CLOCK_SetEbuClockDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[157]"></a>XMC_SCU_CLOCK_SetWdtClockDivider</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[2eb]"></a>XMC_SCU_CLOCK_SetExternalOutputClockDivider</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>XMC_SCU_CLOCK_EnableClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>

<P><STRONG><a name="[2ec]"></a>XMC_SCU_CLOCK_DisableClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>XMC_SCU_CLOCK_IsClockEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>XMC_SCU_CLOCK_EnableUsbPll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>XMC_SCU_CLOCK_DisableUsbPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>XMC_SCU_CLOCK_StartUsbPll</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[2f0]"></a>XMC_SCU_CLOCK_StopUsbPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>XMC_SCU_POWER_EnableUsb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>XMC_SCU_POWER_DisableUsb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>XMC_SCU_CLOCK_IsUsbPllLocked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>XMC_SCU_HIB_DisableHibernateDomain</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>XMC_SCU_HIB_IsHibernateDomainEnabled</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_IsEnabled
</UL>

<P><STRONG><a name="[2f5]"></a>XMC_SCU_HIB_EnableInternalSlowClock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>XMC_SCU_HIB_DisableInternalSlowClock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>XMC_SCU_CLOCK_DisableLowPowerOscillator</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>XMC_SCU_CLOCK_DisableHighPerformanceOscillator</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>XMC_SCU_CLOCK_StopSystemPll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>XMC_SCU_CLOCK_IsSystemPllLocked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>XMC_SCU_INTERRUPT_SetEventHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_INTERRUPT_SetEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_SCU_XMC4_RegisterCallback
</UL>

<P><STRONG><a name="[166]"></a>XMC_SCU_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_SCU_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_0_IRQHandler
</UL>

<P><STRONG><a name="[2fb]"></a>XMC_CCU4_GetDriverVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>XMC_CCU4_lDeassertReset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, xmc_ccu4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CCU4_lDeassertReset &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>

<P><STRONG><a name="[1b8]"></a>XMC_CCU4_EnableModule</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xmc_ccu4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_CCU4_EnableModule &rArr; XMC_CCU4_lDeassertReset &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_lDeassertReset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
</UL>

<P><STRONG><a name="[1ba]"></a>XMC_CCU4_lAssertReset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, xmc_ccu4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_AssertPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_DisableModule
</UL>

<P><STRONG><a name="[1bc]"></a>XMC_CCU4_DisableModule</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xmc_ccu4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_lAssertReset
</UL>

<P><STRONG><a name="[161]"></a>XMC_CCU4_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xmc_ccu4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_CCU4_lDeassertReset &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_CCU4_Init
</UL>

<P><STRONG><a name="[2fc]"></a>XMC_CCU4_SetModuleClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>XMC_CCU4_SetMultiChannelShadowTransferMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>XMC_CCU4_SLICE_CompareInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, xmc_ccu4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>

<P><STRONG><a name="[2fe]"></a>XMC_CCU4_SLICE_CaptureInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>XMC_CCU4_SLICE_StartConfig</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>XMC_CCU4_SLICE_StopConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>XMC_CCU4_SLICE_LoadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>XMC_CCU4_SLICE_ModulationConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>XMC_CCU4_SLICE_CountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>XMC_CCU4_SLICE_GateConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>XMC_CCU4_SLICE_Capture0Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>XMC_CCU4_SLICE_Capture1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>XMC_CCU4_SLICE_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>XMC_CCU4_SLICE_StatusBitOverrideConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>XMC_CCU4_SLICE_TrapConfig</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>XMC_CCU4_SLICE_ConfigureEvent</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>XMC_CCU4_SLICE_SetInput</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>XMC_CCU4_SLICE_SetTimerRepeatMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>XMC_CCU4_SLICE_SetTimerCountingMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>XMC_CCU4_SLICE_GetCaptureRegisterValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>XMC_CCU4_SLICE_GetLastCapturedTimerValue</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>XMC_CCU4_GetCapturedValueFromFifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>XMC_CCU4_SLICE_EnableDithering</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, xmc_ccu4.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>XMC_CCU4_SLICE_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreqAndDutyCycle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreq
</UL>

<P><STRONG><a name="[16f]"></a>XMC_CCU4_EnableShadowTransfer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc_ccu4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreqAndDutyCycle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetDutyCycle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>

<P><STRONG><a name="[175]"></a>XMC_CCU4_SLICE_GetEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_GetInterruptStatus
</UL>

<P><STRONG><a name="[16a]"></a>XMC_CCU4_SLICE_SetInterruptNode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xmc_ccu4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CCU4_SLICE_SetInterruptNode
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_ConfigInterrupts
</UL>

<P><STRONG><a name="[177]"></a>XMC_CCU4_SLICE_SetPassiveLevel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_ccu4.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetPassiveLevel
</UL>

<P><STRONG><a name="[313]"></a>XMC_GPIO_GetDriverVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xmc_gpio.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>XMC_GPIO_SetMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, xmc_gpio.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>XMC_GPIO_SetHardwareControl</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, xmc_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_GPIO_SetHardwareControl
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_Initialize
</UL>

<P><STRONG><a name="[315]"></a>XMC_RTC_GetDriverVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xmc_rtc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>XMC_RTC_Start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, xmc_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_RTC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1be]"></a>XMC_RTC_Stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, xmc_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>

<P><STRONG><a name="[194]"></a>XMC_RTC_SetPrescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xmc_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Init
</UL>

<P><STRONG><a name="[186]"></a>XMC_RTC_SetTime</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, xmc_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[187]"></a>XMC_RTC_GetTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time
</UL>

<P><STRONG><a name="[316]"></a>XMC_RTC_GetTimeStdFormat</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, xmc_rtc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>XMC_RTC_SetAlarm</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, xmc_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetMirrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarmTime
</UL>

<P><STRONG><a name="[18b]"></a>XMC_RTC_GetAlarm</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarmTime
</UL>

<P><STRONG><a name="[317]"></a>XMC_RTC_GetAlarmStdFormat</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, xmc_rtc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>XMC_RTC_GetEventStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
</UL>

<P><STRONG><a name="[318]"></a>XMC_VADC_GetDriverVersion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>XMC_VADC_GLOBAL_EnableModule</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, xmc_vadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_VADC_GLOBAL_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_Init
</UL>

<P><STRONG><a name="[1c0]"></a>XMC_VADC_GLOBAL_DisableModule</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_AssertPeripheralReset
</UL>

<P><STRONG><a name="[15c]"></a>XMC_VADC_GLOBAL_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, xmc_vadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XMC_VADC_GLOBAL_Init &rArr; XMC_VADC_GLOBAL_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_EnableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_ADC_Init
</UL>

<P><STRONG><a name="[14b]"></a>XMC_VADC_GLOBAL_InputClassInit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, xmc_vadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_VADC_GLOBAL_InputClassInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_Init
</UL>

<P><STRONG><a name="[15f]"></a>XMC_VADC_GLOBAL_StartupCalibration</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, xmc_vadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_ADC_Init
</UL>

<P><STRONG><a name="[319]"></a>XMC_VADC_GLOBAL_SetBoundaries</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>XMC_VADC_GLOBAL_SetCompareValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>XMC_VADC_GLOBAL_GetCompareResult</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>XMC_VADC_GLOBAL_BindGroupToEMux</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>XMC_VADC_GLOBAL_SetResultEventInterruptNode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc_vadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_Init
</UL>

<P><STRONG><a name="[1c1]"></a>XMC_VADC_GROUP_InputClassInit</STRONG> (Thumb, 110 bytes, Stack size 44 bytes, xmc_vadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_Init
</UL>

<P><STRONG><a name="[15d]"></a>XMC_VADC_GROUP_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xmc_vadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = XMC_VADC_GROUP_Init &rArr; XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_InputClassInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_ADC_Init
</UL>

<P><STRONG><a name="[15e]"></a>XMC_VADC_GROUP_SetPowerMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc_vadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_ADC_Init
</UL>

<P><STRONG><a name="[31e]"></a>XMC_VADC_GROUP_SetSyncSlave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>XMC_VADC_GROUP_SetSyncMaster</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>XMC_VADC_GROUP_CheckSlaveReadiness</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>XMC_VADC_GROUP_IgnoreSlaveReadiness</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>XMC_VADC_GROUP_EnableChannelSyncRequest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>XMC_VADC_GROUP_DisableChannelSyncRequest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>XMC_VADC_GROUP_IsConverterBusy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>XMC_VADC_GROUP_SetBoundaries</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>XMC_VADC_GROUP_TriggerServiceRequest</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>XMC_VADC_GROUP_ScanInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_ScanDisableArbitrationSlot
</UL>

<P><STRONG><a name="[327]"></a>XMC_VADC_GROUP_ScanSelectTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>XMC_VADC_GROUP_ScanSelectGating</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>XMC_VADC_GROUP_ScanSequenceAbort</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_ScanDisableArbitrationSlot
</UL>

<P><STRONG><a name="[329]"></a>XMC_VADC_GROUP_ScanGetNumChannelsPending</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>XMC_VADC_GLOBAL_BackgroundInit</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, xmc_vadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_VADC_GLOBAL_BackgroundInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_Init
</UL>

<P><STRONG><a name="[32b]"></a>XMC_VADC_GLOBAL_BackgroundSelectTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>XMC_VADC_GLOBAL_BackgroundSelectGating</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>XMC_VADC_GLOBAL_BackgroundAbortSequence</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
</UL>

<P><STRONG><a name="[32d]"></a>XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>XMC_VADC_GROUP_QueueInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueDisableArbitrationSlot
</UL>

<P><STRONG><a name="[32e]"></a>XMC_VADC_GROUP_QueueSelectTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>XMC_VADC_GROUP_QueueSelectGating</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>XMC_VADC_GROUP_QueueGetLength</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueRemoveChannel
</UL>

<P><STRONG><a name="[1ca]"></a>XMC_VADC_GROUP_QueueAbortSequence</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueDisableArbitrationSlot
</UL>

<P><STRONG><a name="[1cb]"></a>XMC_VADC_GROUP_QueueRemoveChannel</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueGetLength
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueDisableArbitrationSlot
</UL>

<P><STRONG><a name="[330]"></a>XMC_VADC_GROUP_QueueGetNextChannel</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>XMC_VADC_GROUP_QueueGetInterruptedChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>XMC_VADC_GROUP_ChannelInit</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, xmc_vadc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XMC_VADC_GROUP_ChannelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_Init
</UL>

<P><STRONG><a name="[333]"></a>XMC_VADC_GROUP_SetChannelAlias</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>XMC_VADC_GROUP_ChannelIsResultOutOfBounds</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>XMC_VADC_GROUP_ChannelSetInputReference</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>XMC_VADC_GROUP_ChannelSetResultRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>XMC_VADC_GROUP_ChannelGetResultRegister</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>XMC_VADC_GROUP_ChannelTriggerEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>XMC_VADC_GROUP_ChannelSetEventInterruptNode</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>XMC_VADC_GROUP_ChannelTriggerEventGenCriteria</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>XMC_VADC_GROUP_AddResultToFifo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>XMC_VADC_GROUP_SetResultFastCompareValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>XMC_VADC_GROUP_GetFastCompareResult</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>XMC_VADC_GROUP_SetResultInterruptNode</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, xmc_vadc.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>XMC_VADC_GROUP_IsResultRegisterFifoHead</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_GetResultFifoHead
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_GetResultFifoTail
</UL>

<P><STRONG><a name="[1cd]"></a>XMC_VADC_GROUP_GetResultFifoTail</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_IsResultRegisterFifoHead
</UL>

<P><STRONG><a name="[1cf]"></a>XMC_VADC_GROUP_GetResultFifoHead</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_IsResultRegisterFifoHead
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler_Veneer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SCU_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>ERU0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>ERU0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ERU0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>ERU0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ERU0_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>ERU0_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ERU0_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU0_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>ERU0_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ERU1_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>ERU1_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>ERU1_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>ERU1_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ERU1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>ERU1_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ERU1_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERU1_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>ERU1_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>PMU0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>PMU0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>VADC0_C0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>VADC0_C0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>VADC0_C0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>VADC0_C0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>VADC0_C0_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>VADC0_C0_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>VADC0_C0_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_C0_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>VADC0_C0_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>VADC0_G0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>VADC0_G0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>VADC0_G0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>VADC0_G0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>VADC0_G0_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>VADC0_G0_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>VADC0_G0_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G0_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>VADC0_G0_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>VADC0_G1_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>VADC0_G1_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>VADC0_G1_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>VADC0_G1_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>VADC0_G1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>VADC0_G1_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>VADC0_G1_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G1_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>VADC0_G1_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>VADC0_G2_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>VADC0_G2_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>VADC0_G2_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>VADC0_G2_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>VADC0_G2_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>VADC0_G2_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>VADC0_G2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G2_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>VADC0_G2_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>VADC0_G3_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>VADC0_G3_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>VADC0_G3_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>VADC0_G3_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>VADC0_G3_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>VADC0_G3_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>VADC0_G3_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VADC0_G3_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>VADC0_G3_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DSD0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>DSD0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>DSD0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>DSD0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DSD0_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>DSD0_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>DSD0_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>DSD0_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>DSD0_4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>DSD0_4_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>DSD0_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>DSD0_5_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>DSD0_6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>DSD0_6_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>DSD0_7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD0_7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>DSD0_7_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>DAC0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>DAC0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>DAC0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>DAC0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>CCU40_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>CCU40_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>CCU40_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>CCU40_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>CCU40_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>CCU40_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>CCU40_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU40_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>CCU40_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>CCU41_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>CCU41_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>CCU41_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>CCU41_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>CCU41_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>CCU41_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>CCU41_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU41_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>CCU41_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>CCU42_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>CCU42_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>CCU42_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>CCU42_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>CCU42_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>CCU42_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>CCU42_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU42_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>CCU42_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>CCU43_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>CCU43_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>CCU43_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>CCU43_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>CCU43_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>CCU43_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>CCU43_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU43_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>CCU43_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>CCU80_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>CCU80_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>CCU80_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>CCU80_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>CCU80_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>CCU80_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>CCU80_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU80_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>CCU80_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>CCU81_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>CCU81_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>CCU81_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>CCU81_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>CCU81_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>CCU81_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>CCU81_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU81_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>CCU81_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>POSIF0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>POSIF0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>POSIF0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>POSIF0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>POSIF1_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF1_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF1_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>POSIF1_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>POSIF1_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF1_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSIF1_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>POSIF1_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>CAN0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>CAN0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>CAN0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>CAN0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>CAN0_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>CAN0_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>CAN0_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>CAN0_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>CAN0_4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>CAN0_4_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>CAN0_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>CAN0_5_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>CAN0_6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_6_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>CAN0_7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_7_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>USIC0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>USIC0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>USIC0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>USIC0_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>USIC0_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>USIC0_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>USIC0_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>USIC0_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>USIC0_4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>USIC0_4_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>USIC0_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>USIC0_5_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>USIC1_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>USIC1_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>USIC1_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>USIC1_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>USIC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>USIC1_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>USIC1_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>USIC1_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>USIC1_4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>USIC1_4_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>USIC1_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>USIC1_5_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>USIC2_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>USIC2_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>USIC2_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>USIC2_1_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>USIC2_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>USIC2_2_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>USIC2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>USIC2_3_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>USIC2_4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>USIC2_4_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>USIC2_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>USIC2_5_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>LEDTS0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTS0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTS0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>LEDTS0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>FCE0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCE0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCE0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>FCE0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>GPDMA0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>GPDMA0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>SDMMC0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>SDMMC0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>USB0_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>USB0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ETH0_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>GPDMA1_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>GPDMA1_0_IRQHandler_Veneer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SystemInit_DAVE3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_xmc4500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[33f]"></a>AllowPLLInitByStartup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_xmc4500.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_xmc4500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>

<P><STRONG><a name="[1d2]"></a>SystemCoreSetup</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_xmc4500.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[72]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_xmc4500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SystemInit &rArr; SystemCoreClockSetup &rArr; XMC_SCU_CLOCK_Init &rArr; XMC_SCU_CLOCK_StartSystemPll &rArr; XMC_SCU_CLOCK_StepSystemPllFrequency &rArr; XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4500.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>net_sys_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_sys_init &rArr; eth_init_link &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_socket_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_client_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_service_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[1dc]"></a>net_sys_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_service_run
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_main
</UL>

<P><STRONG><a name="[24b]"></a>igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[21d]"></a>igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[250]"></a>ppp_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[251]"></a>slip_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[340]"></a>sntp_get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>http_server_fopen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[22c]"></a>http_server_fclose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[244]"></a>http_server_fread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[26b]"></a>http_server_fgets</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[236]"></a>http_server_ftime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[1e3]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[341]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[343]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[266]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_socket_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_init
</UL>

<P><STRONG><a name="[345]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[239]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[265]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[1ea]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[346]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[347]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1ec]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[348]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1ee]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[349]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34b]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[13d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[34c]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[34d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[34e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[34f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[28a]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1f6]"></a>arp_cache_add</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arp_cache_add &rArr; arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[1fa]"></a>arp_cache_early</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_arp.o(i.arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_cache_early &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[1fc]"></a>arp_cache_find</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, net_arp.o(i.arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[1fd]"></a>arp_cache_update</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_cache_update &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[219]"></a>arp_init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, net_arp.o(i.arp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[1fe]"></a>arp_notify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_arp.o(i.arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_notify &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[1ff]"></a>arp_probe</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_arp.o(i.arp_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_probe &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
</UL>

<P><STRONG><a name="[200]"></a>arp_process</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, net_arp.o(i.arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arp_process &rArr; arp_cache_add &rArr; arp_cache_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[237]"></a>b64_to_asc</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, net_common.o(i.b64_to_asc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = b64_to_asc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[22a]"></a>cgi_content_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.cgi_content_type))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
</UL>

<P><STRONG><a name="[247]"></a>chksum16</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, net_common.o(i.chksum16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[289]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[290]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[287]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[1db]"></a>dhcp_client_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, net_dhcp_client.o(i.dhcp_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_client_init &rArr; udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[1e2]"></a>dhcp_client_run</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, net_dhcp_client.o(i.dhcp_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[24c]"></a>eth_chk_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.eth_chk_addr))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[1d4]"></a>eth_init_link</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, net_eth.o(i.eth_init_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth_init_link &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_notify
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[217]"></a>eth_link_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.eth_link_notify))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>

<P><STRONG><a name="[1dd]"></a>eth_run_link</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, net_eth.o(i.eth_run_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = eth_run_link &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_process
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_fetch_frame
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[220]"></a>eth_send_frame</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, net_eth.o(i.eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[119]"></a>eth_thread</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(i.eth_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = eth_thread &rArr;  eth_thread (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_fetch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_eth.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>get_rnd32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.get_rnd32))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[22d]"></a>http_accept_client</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.http_accept_client))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[23a]"></a>http_check_account</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.http_check_account))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[234]"></a>http_file_access</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_http_server.o(i.http_file_access))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[13a]"></a>http_get_env_var</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, net_http_server.o(i.http_get_env_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_query
</UL>

<P><STRONG><a name="[1d9]"></a>http_server_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_http_server.o(i.http_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_server_init &rArr; tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[1e1]"></a>http_server_run</STRONG> (Thumb, 808 bytes, Stack size 40 bytes, net_http_server.o(i.http_server_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = http_server_run &rArr; tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_script
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fread
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fclose
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_avail
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_max_data_size
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[21c]"></a>icmp_process</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, net_icmp.o(i.icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmp_process &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[1d6]"></a>icmp_service_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_icmp.o(i.icmp_service_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[1df]"></a>icmp_service_run</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_icmp.o(i.icmp_service_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmp_service_run &rArr; icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[2a9]"></a>ip4_checksum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_ip.o(i.ip4_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[21b]"></a>ip_chk_frame</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, net_ip.o(i.ip_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip_chk_frame &rArr; ip_get_chksum &rArr; chksum16
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[24e]"></a>ip_get_locadr</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, net_ip.o(i.ip_get_locadr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ip_get_locadr &rArr; ip_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[1d5]"></a>ip_localhost_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_ip.o(i.ip_localhost_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[1de]"></a>ip_localhost_run</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, net_ip.o(i.ip_localhost_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip_localhost_run &rArr; tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_process
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[248]"></a>ip_send_frame</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, net_ip.o(i.ip_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slip_send_frame
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppp_send_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[24a]"></a>ip_tx_offload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net_ip.o(i.ip_tx_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_tx_offload &rArr; ip_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
</UL>

<P><STRONG><a name="[1f8]"></a>is_subnet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr4.o(i.is_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_route
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[221]"></a>is_subnet_bcast</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_ip.o(i.is_subnet_bcast))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[252]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[254]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[257]"></a>isrSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[259]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[253]"></a>isr_mbx_receive</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[256]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[203]"></a>mem_alloc</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_mem.o(i.mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_fetch_frame
</UL>

<P><STRONG><a name="[240]"></a>mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[21a]"></a>mem_crc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_common.o(i.mem_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[204]"></a>mem_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_message
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_process
</UL>

<P><STRONG><a name="[25f]"></a>mem_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, net_mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_init &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[262]"></a>mem_resize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_mem.o(i.mem_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_resize
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
</UL>

<P><STRONG><a name="[1da]"></a>nbns_client_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_nbns_client.o(i.nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nbns_client_init &rArr; udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[12c]"></a>net_initialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_sys.o(i.net_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_initialize &rArr; net_sys_init &rArr; eth_init_link &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>net_main</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, net_sys.o(i.net_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = net_main &rArr; net_sys_run &rArr; dhcp_client_run &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webServer
</UL>

<P><STRONG><a name="[12d]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_measureData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>osKernelSysTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_PHY_Write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_PHY_Read
</UL>

<P><STRONG><a name="[269]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[260]"></a>osMutexCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[263]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[261]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[127]"></a>osSignalSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_HourPassed
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_notify
</UL>

<P><STRONG><a name="[131]"></a>osSignalWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalWait))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
</UL>

<P><STRONG><a name="[11f]"></a>osThreadCreate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_WebServer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_Sensors
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Thread_Pump
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init_link
</UL>

<P><STRONG><a name="[fa]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[138]"></a>osThreadYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webServer
</UL>

<P><STRONG><a name="[26a]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[267]"></a>osTimerCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_cmsis.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[268]"></a>osTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initialize
</UL>

<P><STRONG><a name="[fe]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[28d]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[125]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[29a]"></a>os_tick_ovf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_ovf))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[299]"></a>os_tick_val</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_val))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[70]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[29e]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[26c]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[270]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[272]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[273]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[275]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[276]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_evt_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[279]"></a>rt_evt_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[27a]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[71]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[29f]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[26e]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[294]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[297]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[28b]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[27c]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[255]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[29b]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[27d]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[280]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[29c]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[281]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>

<P><STRONG><a name="[282]"></a>rt_mut_wait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>

<P><STRONG><a name="[122]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[25b]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[25a]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[26d]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[271]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[274]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[283]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[27e]"></a>rt_ret_val</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[278]"></a>rt_ret_val2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[277]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[285]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[284]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[121]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[26f]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[288]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[28c]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[123]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[28f]"></a>rt_tsk_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[291]"></a>rt_tsk_delete</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[293]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[295]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[2a0]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[214]"></a>str_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_common.o(i.str_copy))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[238]"></a>str_pos</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_common.o(i.str_pos))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[207]"></a>str_scomp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.str_scomp))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[264]"></a>str_up_case</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.str_up_case))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[e8]"></a>svcDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[e9]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[ea]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[eb]"></a>svcKernelSysTick</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_val
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_ovf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelSysTick)
</UL>
<P><STRONG><a name="[298]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[ec]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[ed]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[ee]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[ef]"></a>svcMutexWait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[f0]"></a>svcSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalSet)
</UL>
<P><STRONG><a name="[f1]"></a>svcSignalWait</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalWait)
</UL>
<P><STRONG><a name="[f2]"></a>svcThreadCreate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[f3]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[f4]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[f5]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[f6]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[f7]"></a>svcTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCreate)
</UL>
<P><STRONG><a name="[f8]"></a>svcTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcTimerStart &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[28e]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[246]"></a>tcp_abort</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[241]"></a>tcp_close</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_close &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[243]"></a>tcp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_get_buf &rArr; mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[23d]"></a>tcp_get_socket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_init
</UL>

<P><STRONG><a name="[23f]"></a>tcp_get_state</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[23e]"></a>tcp_listen</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_init
</UL>

<P><STRONG><a name="[242]"></a>tcp_max_data_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_max_data_size))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[21f]"></a>tcp_process</STRONG> (Thumb, 1178 bytes, Stack size 48 bytes, net_tcp.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rnd32
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[245]"></a>tcp_send</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_resize
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[1d8]"></a>tcp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_socket_init))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>

<P><STRONG><a name="[1e0]"></a>tcp_socket_poll</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, net_tcp.o(i.tcp_socket_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_socket_poll &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_avail
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_run
</UL>

<P><STRONG><a name="[213]"></a>udp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_udp.o(i.udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_get_buf &rArr; mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[20b]"></a>udp_get_socket</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, net_udp.o(i.udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_client_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
</UL>

<P><STRONG><a name="[20c]"></a>udp_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_udp.o(i.udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_client_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_init
</UL>

<P><STRONG><a name="[21e]"></a>udp_process</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, net_udp.o(i.udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_process &rArr; ip4_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_localhost_run
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[215]"></a>udp_send</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, net_udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[1d7]"></a>udp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_udp.o(i.udp_socket_init))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[140]"></a>crc32_8bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageFileInfo
</UL>

<P><STRONG><a name="[146]"></a>init_rx_desc</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_Control
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_PowerControl
</UL>

<P><STRONG><a name="[147]"></a>init_tx_desc</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_Control
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_PowerControl
</UL>

<P><STRONG><a name="[142]"></a>crc32_8bit_rev</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[141]"></a>crc32_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_SetAddressFilter
</UL>

<P><STRONG><a name="[ff]"></a>ETH_MAC_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_MAC_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ETH_MAC_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ETH_MAC_Initialize</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ETH_MAC_Initialize &rArr; XMC_GPIO_SetHardwareControl
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetHardwareControl
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>ETH_MAC_Uninitialize</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ETH_MAC_PowerControl</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_MAC_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEthernetClockFrequency
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>ETH_MAC_GetMacAddress</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ETH_MAC_SetMacAddress</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ETH_MAC_SetAddressFilter</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ETH_MAC_SetAddressFilter &rArr; crc32_data
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>ETH_MAC_SendFrame</STRONG> (Thumb, 270 bytes, Stack size 20 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_MAC_SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>ETH_MAC_ReadFrame</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_MAC_ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>ETH_MAC_GetRxFrameSize</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>ETH_MAC_GetRxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>ETH_MAC_GetTxFrameTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>ETH_MAC_Control</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_MAC_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tx_desc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rx_desc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>ETH_MAC_ControlTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eth_mac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>ETH_MAC_PHY_Read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_MAC_PHY_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>ETH_MAC_PHY_Write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, eth_mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_MAC_PHY_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mac.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eth_phy_ksz8031.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>Initialize</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, eth_phy_ksz8031.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>Uninitialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eth_phy_ksz8031.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>PowerControl</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, eth_phy_ksz8031.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>SetInterface</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eth_phy_ksz8031.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>SetMode</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, eth_phy_ksz8031.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>GetLinkState</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eth_phy_ksz8031.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>GetLinkInfo</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eth_phy_ksz8031.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_phy_ksz8031.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>XMC_VADC_GLOBAL_BackgroundTriggerConversion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc_measurement.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MEASUREMENT_StartConversion
</UL>

<P><STRONG><a name="[16d]"></a>XMC_CCU4_SLICE_SetTimerPeriodMatch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreqAndDutyCycle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>

<P><STRONG><a name="[16e]"></a>XMC_CCU4_SLICE_SetTimerCompareMatch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreqAndDutyCycle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetFreq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_SetDutyCycle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_Init
</UL>

<P><STRONG><a name="[169]"></a>XMC_CCU4_SLICE_EnableEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_lCCU4_ConfigInterrupts
</UL>

<P><STRONG><a name="[182]"></a>XMC_SCU_INTERRUPT_EnableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_lConfigureInterrupts
</UL>

<P><STRONG><a name="[195]"></a>XMC_SCU_GetMirrorStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xmc4_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_EnableEvent
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_ClearEvent
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_DisableEvent
</UL>

<P><STRONG><a name="[198]"></a>XMC_SCU_lDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_SCU_lDelay &rArr; SystemCoreClockUpdate &rArr;  SystemCoreClockUpdate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableLowPowerOscillator
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetBackupClockCalibrationMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StepSystemPllFrequency
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnableHibernateDomain
</UL>

<P><STRONG><a name="[1b1]"></a>XMC_SCU_CLOCK_GetSystemClockFrequency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetExternalOutputClockFrequency
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetCcuClockFrequency
</UL>

<P><STRONG><a name="[1bd]"></a>XMC_SCU_GetMirrorStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xmc_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Start
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_SetTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_SetAlarm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_Stop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_RTC_SetPrescaler
</UL>

<P><STRONG><a name="[1c3]"></a>XMC_VADC_GROUP_ScanDisableArbitrationSlot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_ScanSequenceAbort
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_ScanInit
</UL>

<P><STRONG><a name="[1c6]"></a>XMC_VADC_GROUP_BackgroundEnableArbitrationSlot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_vadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundAbortSequence
</UL>

<P><STRONG><a name="[1c5]"></a>XMC_VADC_GROUP_BackgroundDisableArbitrationSlot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_vadc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GLOBAL_BackgroundAbortSequence
</UL>

<P><STRONG><a name="[1c9]"></a>XMC_VADC_GROUP_QueueDisableArbitrationSlot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_vadc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueRemoveChannel
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueAbortSequence
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_VADC_GROUP_QueueInit
</UL>

<P><STRONG><a name="[1d0]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_xmc4500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[29d]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>

<P><STRONG><a name="[296]"></a>rt_ms2tick</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[258]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[2a2]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[2a1]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[216]"></a>eth_check_link</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_check_link
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_link_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
</UL>

<P><STRONG><a name="[218]"></a>eth_fetch_frame</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, net_eth.o(i.eth_fetch_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_fetch_frame &rArr; mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_run_link
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_thread
</UL>

<P><STRONG><a name="[e5]"></a>eth_notify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_eth.o(i.eth_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_notify &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_eth.o(i.eth_init_link)
</UL>
<P><STRONG><a name="[24d]"></a>ip_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip.o(i.ip_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_get_chksum &rArr; chksum16
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[24f]"></a>ip_get_route</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, net_ip.o(i.ip_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
</UL>

<P><STRONG><a name="[249]"></a>icmp_send_message</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, net_icmp.o(i.icmp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icmp_send_message &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_service_run
</UL>

<P><STRONG><a name="[2b1]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
</UL>

<P><STRONG><a name="[2a8]"></a>tcp_map_socket</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2aa]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2a5]"></a>tcp_proc_acknr</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_proc_acknr &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2a6]"></a>tcp_proc_dupack</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2ad]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_que_free &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[2a7]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
</UL>

<P><STRONG><a name="[2ae]"></a>tcp_que_resend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
</UL>

<P><STRONG><a name="[2a4]"></a>tcp_send_ctrl</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2af]"></a>tcp_send_data</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[2ab]"></a>tcp_send_reset</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2ac]"></a>tcp_set_cwnd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2a3]"></a>tcp_transit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_socket_poll
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2b0]"></a>tcp_write</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_write &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_tx_offload
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[e7]"></a>nbns_listener</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, net_nbns_client.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nbns_listener &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(i.nbns_client_init)
</UL>
<P><STRONG><a name="[e4]"></a>dhcp_listener</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, net_dhcp_client.o(i.dhcp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dhcp_listener &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp_client.o(i.dhcp_client_init)
</UL>
<P><STRONG><a name="[20e]"></a>dhcp_send_message</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, net_dhcp_client.o(i.dhcp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_run
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[212]"></a>proc_opt_renew</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, net_dhcp_client.o(i.proc_opt_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = proc_opt_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[211]"></a>proc_opt_req</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, net_dhcp_client.o(i.proc_opt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = proc_opt_req &rArr; dhcp_client_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[210]"></a>proc_opt_sel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_dhcp_client.o(i.proc_opt_sel))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[1f5]"></a>add_server_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_http_server.o(i.add_server_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_server_id &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[205]"></a>chk_post_req</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, net_http_server.o(i.chk_post_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = chk_post_req &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[229]"></a>cmp_fname_ext</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_http_server.o(i.cmp_fname_ext))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
</UL>

<P><STRONG><a name="[206]"></a>cmp_header</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_http_server.o(i.cmp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[20a]"></a>get_next_field</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_http_server.o(i.get_next_field))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[209]"></a>get_next_par</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, net_http_server.o(i.get_next_par))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[227]"></a>hex2byte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_http_server.o(i.hex2byte))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_env_var
</UL>

<P><STRONG><a name="[222]"></a>http_add_header</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, net_http_server.o(i.http_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = http_add_header &rArr; utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_encoding
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgx_content_type
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[226]"></a>http_error_msg</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, net_http_server.o(i.http_error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_error_msg &rArr; add_server_id &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
</UL>

<P><STRONG><a name="[228]"></a>http_get_ftype</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, net_http_server.o(i.http_get_ftype))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = http_get_ftype
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_content_type
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_fname_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[22b]"></a>http_kill_session</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, net_http_server.o(i.http_kill_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = http_kill_session &rArr; cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fclose
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[e6]"></a>http_listener</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, net_http_server.o(i.http_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = http_listener &rArr; http_proc_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_query
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept_client
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_req_line
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_ftype
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_http_server.o(i.http_server_init)
</UL>
<P><STRONG><a name="[230]"></a>http_open_file</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, net_http_server.o(i.http_open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_open_file &rArr; imageFileInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageFileInfo
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_ftime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fopen
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_file_access
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[22f]"></a>http_proc_header</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, net_http_server.o(i.http_proc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = http_proc_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_check_account
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pos
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b64_to_asc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[233]"></a>http_proc_multipart</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, net_http_server.o(i.http_proc_multipart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = http_proc_multipart &rArr; cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[231]"></a>http_proc_post</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, net_http_server.o(i.http_proc_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = http_proc_post &rArr; cgi_process_data &rArr; http_get_env_var
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[208]"></a>http_strcpy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_http_server.o(i.http_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = http_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_req
</UL>

<P><STRONG><a name="[23b]"></a>http_to_utc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, net_http_server.o(i.http_to_utc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[22e]"></a>proc_req_line</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_http_server.o(i.proc_req_line))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[232]"></a>read_script_line</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, net_http_server.o(i.read_script_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_script_line
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_fgets
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_server_run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[23c]"></a>search_delim</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, net_http_server.o(i.search_delim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_delim
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
</UL>

<P><STRONG><a name="[225]"></a>utc_to_http</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, net_http_server.o(i.utc_to_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[11a]"></a>net_timer_tick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_sys.o(i.net_timer_tick))
<BR>[Address Reference Count : 1]<UL><LI> net_sys.o(.constdata)
</UL>
<P><STRONG><a name="[27b]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[286]"></a>rt_ret_regs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_regs))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>

<P><STRONG><a name="[1f9]"></a>arp_cache_alloc</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[1f7]"></a>arp_is_cacheable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[202]"></a>arp_proc_response</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_proc_response
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[201]"></a>arp_send_reply</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arp_send_reply &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_process
</UL>

<P><STRONG><a name="[1fb]"></a>arp_send_request</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_request &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_early
</UL>

<P><STRONG><a name="[25c]"></a>mem_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_resize
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[25d]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_resize
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[25e]"></a>get_crc32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_common.o(i.get_crc32))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_crc32
</UL>

<P><STRONG><a name="[1f2]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
